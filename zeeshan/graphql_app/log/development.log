Started GET "/" for ::1 at 2024-04-27 15:48:06 +0530
  
ActiveRecord::NoDatabaseError (We could not find your database: graphql_app_development. Which can be found in the database configuration file located at config/database.yml.

To resolve this issue:

- Did you create the database for this app, or delete it? You may need to create your database.
- Has the database name changed? Check your database.yml config has the correct database name.

To create your database, run:

        bin/rails db:create
):
  
activerecord (7.0.8.1) lib/active_record/connection_adapters/postgresql_adapter.rb:81:in `rescue in new_client'
activerecord (7.0.8.1) lib/active_record/connection_adapters/postgresql_adapter.rb:77:in `new_client'
activerecord (7.0.8.1) lib/active_record/connection_adapters/postgresql_adapter.rb:37:in `postgresql_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:656:in `public_send'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:656:in `new_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:700:in `checkout_new_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:679:in `try_to_checkout_new_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:640:in `acquire_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:341:in `checkout'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:181:in `connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_handler.rb:211:in `retrieve_connection'
activerecord (7.0.8.1) lib/active_record/connection_handling.rb:313:in `retrieve_connection'
activerecord (7.0.8.1) lib/active_record/connection_handling.rb:280:in `connection'
activerecord (7.0.8.1) lib/active_record/migration.rb:648:in `connection'
activerecord (7.0.8.1) lib/active_record/migration.rb:643:in `build_watcher'
activerecord (7.0.8.1) lib/active_record/migration.rb:625:in `block in call'
activerecord (7.0.8.1) lib/active_record/migration.rb:624:in `synchronize'
activerecord (7.0.8.1) lib/active_record/migration.rb:624:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:99:in `run_callbacks'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
railties (7.0.8.1) lib/rails/rack/logger.rb:40:in `call_app'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `block in call'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `block in tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:37:in `tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `tagged'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/request_id.rb:26:in `call'
rack (2.2.9) lib/rack/runtime.rb:22:in `call'
activesupport (7.0.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/static.rb:23:in `call'
rack (2.2.9) lib/rack/sendfile.rb:110:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
puma (5.6.8) lib/puma/configuration.rb:252:in `call'
puma (5.6.8) lib/puma/request.rb:77:in `block in handle_request'
puma (5.6.8) lib/puma/thread_pool.rb:340:in `with_force_shutdown'
puma (5.6.8) lib/puma/request.rb:76:in `handle_request'
puma (5.6.8) lib/puma/server.rb:443:in `process_client'
puma (5.6.8) lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Started GET "/favicon.ico" for ::1 at 2024-04-27 15:48:07 +0530
  
ActiveRecord::NoDatabaseError (We could not find your database: graphql_app_development. Which can be found in the database configuration file located at config/database.yml.

To resolve this issue:

- Did you create the database for this app, or delete it? You may need to create your database.
- Has the database name changed? Check your database.yml config has the correct database name.

To create your database, run:

        bin/rails db:create
):
  
activerecord (7.0.8.1) lib/active_record/connection_adapters/postgresql_adapter.rb:81:in `rescue in new_client'
activerecord (7.0.8.1) lib/active_record/connection_adapters/postgresql_adapter.rb:77:in `new_client'
activerecord (7.0.8.1) lib/active_record/connection_adapters/postgresql_adapter.rb:37:in `postgresql_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:656:in `public_send'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:656:in `new_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:700:in `checkout_new_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:679:in `try_to_checkout_new_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:640:in `acquire_connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:341:in `checkout'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:181:in `connection'
activerecord (7.0.8.1) lib/active_record/connection_adapters/abstract/connection_handler.rb:211:in `retrieve_connection'
activerecord (7.0.8.1) lib/active_record/connection_handling.rb:313:in `retrieve_connection'
activerecord (7.0.8.1) lib/active_record/connection_handling.rb:280:in `connection'
activerecord (7.0.8.1) lib/active_record/migration.rb:648:in `connection'
activerecord (7.0.8.1) lib/active_record/migration.rb:643:in `build_watcher'
activerecord (7.0.8.1) lib/active_record/migration.rb:625:in `block in call'
activerecord (7.0.8.1) lib/active_record/migration.rb:624:in `synchronize'
activerecord (7.0.8.1) lib/active_record/migration.rb:624:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:99:in `run_callbacks'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
railties (7.0.8.1) lib/rails/rack/logger.rb:40:in `call_app'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `block in call'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `block in tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:37:in `tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `tagged'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/request_id.rb:26:in `call'
rack (2.2.9) lib/rack/runtime.rb:22:in `call'
activesupport (7.0.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/static.rb:23:in `call'
rack (2.2.9) lib/rack/sendfile.rb:110:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
puma (5.6.8) lib/puma/configuration.rb:252:in `call'
puma (5.6.8) lib/puma/request.rb:77:in `block in handle_request'
puma (5.6.8) lib/puma/thread_pool.rb:340:in `with_force_shutdown'
puma (5.6.8) lib/puma/request.rb:76:in `handle_request'
puma (5.6.8) lib/puma/server.rb:443:in `process_client'
puma (5.6.8) lib/puma/thread_pool.rb:147:in `block in spawn_thread'
  [1m[35m (7273.4ms)[0m  [1m[35mCREATE DATABASE "graphql_app_development" ENCODING = 'unicode'[0m
  [1m[35m (1327.9ms)[0m  [1m[35mCREATE DATABASE "graphql_app_test" ENCODING = 'unicode'[0m
Started GET "/" for ::1 at 2024-04-27 15:57:27 +0530
Processing by Rails::WelcomeController#index as HTML
  Rendering vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/templates/rails/welcome/index.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/templates/rails/welcome/index.html.erb (Duration: 42.6ms | Allocations: 728)
Completed 200 OK in 65ms (Views: 47.1ms | ActiveRecord: 0.0ms | Allocations: 6947)


Started GET "/" for ::1 at 2024-04-27 16:00:05 +0530
  [1m[35m (273.1ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" character varying NOT NULL PRIMARY KEY)[0m
  [1m[35m (116.7ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" character varying NOT NULL PRIMARY KEY, "value" character varying, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  
ActiveRecord::PendingMigrationError (

Migrations are pending. To resolve this issue, run:

        bin/rails db:migrate RAILS_ENV=development

You have 1 pending migration:

20240427102830_create_users.rb


):
  
activerecord (7.0.8.1) lib/active_record/migration.rb:662:in `check_pending!'
activerecord (7.0.8.1) lib/active_record/migration.rb:627:in `block (2 levels) in call'
activesupport (7.0.8.1) lib/active_support/file_update_checker.rb:83:in `execute'
activerecord (7.0.8.1) lib/active_record/migration.rb:632:in `block in call'
activerecord (7.0.8.1) lib/active_record/migration.rb:624:in `synchronize'
activerecord (7.0.8.1) lib/active_record/migration.rb:624:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:99:in `run_callbacks'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
railties (7.0.8.1) lib/rails/rack/logger.rb:40:in `call_app'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `block in call'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `block in tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:37:in `tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `tagged'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/request_id.rb:26:in `call'
rack (2.2.9) lib/rack/runtime.rb:22:in `call'
activesupport (7.0.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/static.rb:23:in `call'
rack (2.2.9) lib/rack/sendfile.rb:110:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
puma (5.6.8) lib/puma/configuration.rb:252:in `call'
puma (5.6.8) lib/puma/request.rb:77:in `block in handle_request'
puma (5.6.8) lib/puma/thread_pool.rb:340:in `with_force_shutdown'
puma (5.6.8) lib/puma/request.rb:76:in `handle_request'
puma (5.6.8) lib/puma/server.rb:443:in `process_client'
puma (5.6.8) lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Started GET "/favicon.ico" for ::1 at 2024-04-27 16:00:05 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mCACHE ActiveRecord::SchemaMigration Pluck (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  
ActiveRecord::PendingMigrationError (

Migrations are pending. To resolve this issue, run:

        bin/rails db:migrate RAILS_ENV=development

You have 1 pending migration:

20240427102830_create_users.rb


):
  
activerecord (7.0.8.1) lib/active_record/migration.rb:662:in `check_pending!'
activerecord (7.0.8.1) lib/active_record/migration.rb:627:in `block (2 levels) in call'
activesupport (7.0.8.1) lib/active_support/file_update_checker.rb:83:in `execute'
activerecord (7.0.8.1) lib/active_record/migration.rb:632:in `block in call'
activerecord (7.0.8.1) lib/active_record/migration.rb:624:in `synchronize'
activerecord (7.0.8.1) lib/active_record/migration.rb:624:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:99:in `run_callbacks'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
railties (7.0.8.1) lib/rails/rack/logger.rb:40:in `call_app'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `block in call'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `block in tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:37:in `tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `tagged'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/request_id.rb:26:in `call'
rack (2.2.9) lib/rack/runtime.rb:22:in `call'
activesupport (7.0.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/static.rb:23:in `call'
rack (2.2.9) lib/rack/sendfile.rb:110:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
puma (5.6.8) lib/puma/configuration.rb:252:in `call'
puma (5.6.8) lib/puma/request.rb:77:in `block in handle_request'
puma (5.6.8) lib/puma/thread_pool.rb:340:in `with_force_shutdown'
puma (5.6.8) lib/puma/request.rb:76:in `handle_request'
puma (5.6.8) lib/puma/server.rb:443:in `process_client'
puma (5.6.8) lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Started POST "/rails/actions" for ::1 at 2024-04-27 16:00:08 +0530
  [1m[35m (19.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3299811050972070600)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateUsers (20240427102830)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (178.4ms)[0m  [1m[35mCREATE TABLE "users" ("id" bigserial primary key, "first_name" character varying, "last_name" character varying, "email" character varying, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (22.7ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ($1) RETURNING "version"[0m  [["version", "20240427102830"]]
  [1m[36mTRANSACTION (26.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Create (57.1ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "key"[0m  [["key", "environment"], ["value", "development"], ["created_at", "2024-04-27 10:30:09.023493"], ["updated_at", "2024-04-27 10:30:09.023493"]]
  [1m[36mTRANSACTION (18.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(3299811050972070600)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started GET "/" for ::1 at 2024-04-27 16:00:09 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by Rails::WelcomeController#index as HTML
  Rendering vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/templates/rails/welcome/index.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/templates/rails/welcome/index.html.erb (Duration: 2.3ms | Allocations: 459)
Completed 200 OK in 11ms (Views: 4.7ms | ActiveRecord: 0.0ms | Allocations: 3865)


  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3299811050972070600)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateBlogs (20240427103029)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (107.3ms)[0m  [1m[35mCREATE TABLE "blogs" ("id" bigserial primary key, "title" character varying, "description" text, "user_id" bigint NOT NULL, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL, CONSTRAINT "fk_rails_40ebb3948d"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (54.7ms)[0m  [1m[35mCREATE INDEX "index_blogs_on_user_id" ON "blogs" ("user_id")[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.6ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ($1) RETURNING "version"[0m  [["version", "20240427103029"]]
  [1m[36mTRANSACTION (26.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(3299811050972070600)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3299811050972070600)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (1.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(3299811050972070600)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (1.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3299811050972070600)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(3299811050972070600)[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Pluck (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Create (1.1ms)[0m  [1m[32mINSERT INTO "users" ("first_name", "last_name", "email", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["first_name", "Efren"], ["last_name", "Rau"], ["email", "efren@test.com"], ["created_at", "2024-04-27 10:34:10.803108"], ["updated_at", "2024-04-27 10:34:10.803108"]]
  [1m[36mTRANSACTION (42.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Create (0.5ms)[0m  [1m[32mINSERT INTO "users" ("first_name", "last_name", "email", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["first_name", "Olimpia"], ["last_name", "Koss"], ["email", "olimpia@test.com"], ["created_at", "2024-04-27 10:34:10.854422"], ["updated_at", "2024-04-27 10:34:10.854422"]]
  [1m[36mTRANSACTION (4.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Create (0.5ms)[0m  [1m[32mINSERT INTO "users" ("first_name", "last_name", "email", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["first_name", "Denny"], ["last_name", "Streich"], ["email", "denny@test.com"], ["created_at", "2024-04-27 10:34:10.866173"], ["updated_at", "2024-04-27 10:34:10.866173"]]
  [1m[36mTRANSACTION (14.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Create (0.5ms)[0m  [1m[32mINSERT INTO "users" ("first_name", "last_name", "email", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["first_name", "Arlette"], ["last_name", "Pfeffer"], ["email", "arlette@test.com"], ["created_at", "2024-04-27 10:34:10.888862"], ["updated_at", "2024-04-27 10:34:10.888862"]]
  [1m[36mTRANSACTION (11.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Create (0.5ms)[0m  [1m[32mINSERT INTO "users" ("first_name", "last_name", "email", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["first_name", "Retta"], ["last_name", "Okuneva"], ["email", "retta@test.com"], ["created_at", "2024-04-27 10:34:10.911292"], ["updated_at", "2024-04-27 10:34:10.911292"]]
  [1m[36mTRANSACTION (12.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (1.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "To Say Nothing of the Dog"], ["description", "[\"Et eum autem. Assumenda est fuga. Quia omnis omnis.\", \"Dolore quis quas. Sed voluptatibus rem. Aut quia iure.\", \"Maiores excepturi omnis. Porro et sint. Odit est quidem.\"]"], ["user_id", 5], ["created_at", "2024-04-27 10:34:11.006104"], ["updated_at", "2024-04-27 10:34:11.006104"]]
  [1m[36mTRANSACTION (27.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.4ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.8ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "The Road Less Traveled"], ["description", "[\"Unde ut laboriosam. Optio quaerat excepturi. Ea natus nesciunt.\", \"Laboriosam similique molestias. Eveniet dolor vero. Porro numquam a.\", \"Vel et ut. Autem magni nisi. Fugit quo delectus.\"]"], ["user_id", 5], ["created_at", "2024-04-27 10:34:11.048689"], ["updated_at", "2024-04-27 10:34:11.048689"]]
  [1m[36mTRANSACTION (7.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "A Catskill Eagle"], ["description", "[\"Pariatur laudantium quaerat. Fugiat ullam atque. Aut illo ut.\", \"Cupiditate voluptate nobis. Rerum doloremque qui. Quibusdam ut non.\", \"Qui ea omnis. Officia cum id. Perspiciatis provident officia.\"]"], ["user_id", 4], ["created_at", "2024-04-27 10:34:11.074830"], ["updated_at", "2024-04-27 10:34:11.074830"]]
  [1m[36mTRANSACTION (14.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.4ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.5ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "The Green Bay Tree"], ["description", "[\"Fugiat molestiae voluptatem. Consequatur cum sapiente. Quam laboriosam nemo.\", \"Omnis minus at. Autem tempora rerum. Tempora impedit ipsum.\", \"Omnis provident modi. Ullam quia quisquam. Cumque ipsa fugit.\"]"], ["user_id", 5], ["created_at", "2024-04-27 10:34:11.104087"], ["updated_at", "2024-04-27 10:34:11.104087"]]
  [1m[36mTRANSACTION (10.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.8ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "A Confederacy of Dunces"], ["description", "[\"Eveniet a et. Voluptas qui nemo. Commodi necessitatibus delectus.\", \"Dolor sed et. In ab cum. Dicta nobis est.\", \"Qui sed quia. Est sunt exercitationem. Quo aperiam eligendi.\"]"], ["user_id", 4], ["created_at", "2024-04-27 10:34:11.128163"], ["updated_at", "2024-04-27 10:34:11.128163"]]
  [1m[36mTRANSACTION (6.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.4ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.9ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Waiting for the Barbarians"], ["description", "[\"Quis et culpa. Ut dolorem est. Aut assumenda perspiciatis.\", \"Libero aliquam nesciunt. Necessitatibus corrupti deserunt. Adipisci et ea.\", \"Fuga consequuntur quas. Ut quia non. Quo excepturi assumenda.\"]"], ["user_id", 2], ["created_at", "2024-04-27 10:34:11.148831"], ["updated_at", "2024-04-27 10:34:11.148831"]]
  [1m[36mTRANSACTION (9.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "A Handful of Dust"], ["description", "[\"Aspernatur qui necessitatibus. Ipsa sunt est. Perspiciatis hic deleniti.\", \"Voluptatem quam voluptate. Quidem non voluptatibus. Voluptatem consequatur officia.\", \"Rerum nesciunt voluptas. Maiores rerum ut. Voluptas voluptate voluptatum.\"]"], ["user_id", 2], ["created_at", "2024-04-27 10:34:11.175434"], ["updated_at", "2024-04-27 10:34:11.175434"]]
  [1m[36mTRANSACTION (13.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "All Passion Spent"], ["description", "[\"Sint architecto necessitatibus. Magnam necessitatibus nobis. Accusantium qui quidem.\", \"Eaque enim maxime. Sequi qui sunt. Est dolorum sint.\", \"Laborum a nostrum. Rerum repellat veniam. Totam sapiente provident.\"]"], ["user_id", 4], ["created_at", "2024-04-27 10:34:11.206320"], ["updated_at", "2024-04-27 10:34:11.206320"]]
  [1m[36mTRANSACTION (5.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Nectar in a Sieve"], ["description", "[\"Beatae consequatur rem. Nulla quia quo. Aut est quae.\", \"Fuga ea molestias. Unde iste repudiandae. Deserunt consequatur perferendis.\", \"Eos officiis sint. Qui molestiae consequuntur. Et voluptas atque.\"]"], ["user_id", 2], ["created_at", "2024-04-27 10:34:11.227662"], ["updated_at", "2024-04-27 10:34:11.227662"]]
  [1m[36mTRANSACTION (61.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.6ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Taming a Sea Horse"], ["description", "[\"Modi nam aut. Eum cupiditate ut. Adipisci asperiores et.\", \"Est expedita tempore. Nobis debitis fuga. Similique sunt et.\", \"Officia dolores omnis. Ea est perferendis. Nisi reprehenderit sit.\"]"], ["user_id", 2], ["created_at", "2024-04-27 10:34:11.304854"], ["updated_at", "2024-04-27 10:34:11.304854"]]
  [1m[36mTRANSACTION (9.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.4ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Unweaving the Rainbow"], ["description", "[\"Assumenda nemo error. Tempore praesentium et. Dolores quo enim.\", \"Ex error nesciunt. Occaecati dignissimos praesentium. Deserunt in labore.\", \"Tenetur quo quia. Aspernatur ut delectus. Aperiam voluptatem sunt.\"]"], ["user_id", 5], ["created_at", "2024-04-27 10:34:11.327173"], ["updated_at", "2024-04-27 10:34:11.327173"]]
  [1m[36mTRANSACTION (6.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.4ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Clouds of Witness"], ["description", "[\"Nobis asperiores reprehenderit. In quibusdam officia. Quas illum accusamus.\", \"Quia amet ducimus. Ex quis alias. Aspernatur autem aperiam.\", \"Quae pariatur facilis. Officiis totam numquam. Vitae atque sed.\"]"], ["user_id", 3], ["created_at", "2024-04-27 10:34:11.348279"], ["updated_at", "2024-04-27 10:34:11.348279"]]
  [1m[36mTRANSACTION (9.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.6ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "To Sail Beyond the Sunset"], ["description", "[\"Quis commodi dolor. Non non excepturi. Et accusamus et.\", \"Eveniet placeat aut. Quae et sunt. Voluptatum ducimus dolor.\", \"Vitae blanditiis voluptates. Officia sunt sed. Exercitationem praesentium illum.\"]"], ["user_id", 4], ["created_at", "2024-04-27 10:34:11.371006"], ["updated_at", "2024-04-27 10:34:11.371006"]]
  [1m[36mTRANSACTION (9.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Far From the Madding Crowd"], ["description", "[\"Sint porro molestiae. Consequuntur omnis quo. Qui nam sequi.\", \"Corrupti laborum temporibus. Illo nihil maiores. Animi quam vel.\", \"Reprehenderit maiores unde. Numquam in atque. Dolorem nihil unde.\"]"], ["user_id", 5], ["created_at", "2024-04-27 10:34:11.396695"], ["updated_at", "2024-04-27 10:34:11.396695"]]
  [1m[36mTRANSACTION (14.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Paths of Glory"], ["description", "[\"Magnam facere ut. Quia ipsam est. Dolorum amet enim.\", \"Distinctio sunt doloremque. Nam molestias doloremque. Ut ullam cupiditate.\", \"Quia officia culpa. Voluptas commodi eos. Quae neque quia.\"]"], ["user_id", 2], ["created_at", "2024-04-27 10:34:11.431302"], ["updated_at", "2024-04-27 10:34:11.431302"]]
  [1m[36mTRANSACTION (12.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.6ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Vanity Fair"], ["description", "[\"Culpa quae autem. Voluptatem autem aut. Reiciendis maiores aut.\", \"Veniam in ratione. Provident ut et. Nemo vel sed.\", \"Cumque aut non. Ipsam ea sint. Est non consequuntur.\"]"], ["user_id", 3], ["created_at", "2024-04-27 10:34:11.465327"], ["updated_at", "2024-04-27 10:34:11.465327"]]
  [1m[36mTRANSACTION (12.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.4ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.5ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "In Dubious Battle"], ["description", "[\"Ab iusto eligendi. Suscipit quidem fuga. Modi atque molestias.\", \"Voluptate consequatur vel. Velit quas fugit. Consequatur odio veniam.\", \"Et omnis temporibus. Sit sapiente et. Doloribus assumenda facere.\"]"], ["user_id", 3], ["created_at", "2024-04-27 10:34:11.492554"], ["updated_at", "2024-04-27 10:34:11.492554"]]
  [1m[36mTRANSACTION (9.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.5ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.5ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "To Say Nothing of the Dog"], ["description", "[\"Veniam quod nihil. Tempore quo rerum. Mollitia est sint.\", \"Libero laboriosam et. Quia perferendis est. Maiores et nemo.\", \"Ipsa est unde. Corporis sapiente ratione. Aspernatur velit animi.\"]"], ["user_id", 1], ["created_at", "2024-04-27 10:34:11.516292"], ["updated_at", "2024-04-27 10:34:11.516292"]]
  [1m[36mTRANSACTION (8.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.4ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.5ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "An Acceptable Time"], ["description", "[\"Qui omnis et. Iste nemo ullam. Dolores dolorum commodi.\", \"Sit quasi et. Et in natus. Ipsum eaque est.\", \"Quod voluptate velit. In velit sit. Nam dolor doloribus.\"]"], ["user_id", 5], ["created_at", "2024-04-27 10:34:11.539965"], ["updated_at", "2024-04-27 10:34:11.539965"]]
  [1m[36mTRANSACTION (6.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Pluck (0.4ms)[0m  [1m[34mSELECT "users"."id" FROM "users"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "Things Fall Apart"], ["description", "[\"Eos odio vel. Deserunt veritatis ut. Nostrum et dolorem.\", \"Ea quas sequi. Qui amet aut. Consequuntur eaque autem.\", \"Et dolores facilis. Ut quam laborum. Nisi debitis voluptatum.\"]"], ["user_id", 5], ["created_at", "2024-04-27 10:34:11.558949"], ["updated_at", "2024-04-27 10:34:11.558949"]]
  [1m[36mTRANSACTION (10.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mUser Count (21.3ms)[0m  [1m[34mSELECT COUNT(*) FROM "users"[0m
  [1m[36mBlog Count (0.7ms)[0m  [1m[34mSELECT COUNT(*) FROM "blogs"[0m
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" ORDER BY "blogs"."id" DESC LIMIT $1[0m  [["LIMIT", 1]]
Started GET "/" for ::1 at 2024-04-27 16:05:06 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by Rails::WelcomeController#index as HTML
  Rendering vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/templates/rails/welcome/index.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/templates/rails/welcome/index.html.erb (Duration: 3.4ms | Allocations: 728)
Completed 200 OK in 509ms (Views: 8.5ms | ActiveRecord: 0.0ms | Allocations: 285716)


Started GET "/" for ::1 at 2024-04-27 16:23:09 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by Rails::WelcomeController#index as HTML
  Rendering vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/templates/rails/welcome/index.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/templates/rails/welcome/index.html.erb (Duration: 4.1ms | Allocations: 727)
Completed 200 OK in 693ms (Views: 9.5ms | ActiveRecord: 0.0ms | Allocations: 285985)


Started GET "/graphiql" for ::1 at 2024-04-27 16:23:53 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 11.2ms | Allocations: 1585)
Completed 500 Internal Server Error in 38ms (ActiveRecord: 0.0ms | Allocations: 3476)


  
ActionView::Template::Error (Your application has sessions disabled. To write to the session you must first configure a session store):
    21:       graphql_endpoint_path: graphql_endpoint_path,
    22:       initial_query: GraphiQL::Rails.config.initial_query,
    23:       logo: GraphiQL::Rails.config.logo,
    24:       headers: GraphiQL::Rails.config.resolve_headers(self),
    25:       query_params: GraphiQL::Rails.config.query_params,
    26:       header_editor_enabled: GraphiQL::Rails.config.header_editor_enabled,
    27:       input_value_deprecation: GraphiQL::Rails.config.input_value_deprecation
  
actionpack (7.0.8.1) lib/action_dispatch/request/session.rb:253:in `load_for_write!'
actionpack (7.0.8.1) lib/action_dispatch/request/session.rb:151:in `[]='
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:451:in `real_csrf_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:469:in `csrf_token_hmac'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:463:in `global_csrf_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:372:in `masked_authenticity_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:359:in `form_authenticity_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:106:in `form_authenticity_token'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:17:in `block in <class:Config>'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:39:in `block in resolve_headers'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `each'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `each_with_object'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `resolve_headers'
graphiql-rails (1.10.0) app/views/graphiql/rails/editors/show.html.erb:24
actionview (7.0.8.1) lib/action_view/base.rb:244:in `public_send'
actionview (7.0.8.1) lib/action_view/base.rb:244:in `_run'
actionview (7.0.8.1) lib/action_view/template.rb:157:in `block in render'
activesupport (7.0.8.1) lib/active_support/notifications.rb:208:in `instrument'
actionview (7.0.8.1) lib/action_view/template.rb:361:in `instrument_render_template'
actionview (7.0.8.1) lib/action_view/template.rb:155:in `render'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:65:in `block (2 levels) in render_template'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `block in instrument'
activesupport (7.0.8.1) lib/active_support/notifications/instrumenter.rb:24:in `instrument'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `instrument'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:60:in `block in render_template'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:79:in `render_with_layout'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:59:in `render_template'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:11:in `render'
actionview (7.0.8.1) lib/action_view/renderer/renderer.rb:61:in `render_template_to_object'
actionview (7.0.8.1) lib/action_view/renderer/renderer.rb:29:in `render_to_object'
actionview (7.0.8.1) lib/action_view/rendering.rb:117:in `block in _render_template'
actionview (7.0.8.1) lib/action_view/base.rb:270:in `in_rendering_context'
actionview (7.0.8.1) lib/action_view/rendering.rb:116:in `_render_template'
actionpack (7.0.8.1) lib/action_controller/metal/streaming.rb:216:in `_render_template'
actionview (7.0.8.1) lib/action_view/rendering.rb:103:in `render_to_body'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:158:in `render_to_body'
actionpack (7.0.8.1) lib/action_controller/metal/renderers.rb:141:in `render_to_body'
actionpack (7.0.8.1) lib/abstract_controller/rendering.rb:27:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:139:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:22:in `block (2 levels) in render'
/home/user/.rvm/rubies/ruby-3.0.0/lib/ruby/3.0.0/benchmark.rb:308:in `realtime'
activesupport (7.0.8.1) lib/active_support/core_ext/benchmark.rb:14:in `ms'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:22:in `block in render'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:91:in `cleanup_view_runtime'
activerecord (7.0.8.1) lib/active_record/railties/controller_runtime.rb:34:in `cleanup_view_runtime'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:21:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/implicit_render.rb:35:in `default_render'
actionpack (7.0.8.1) lib/action_controller/metal/basic_implicit_render.rb:7:in `send_action'
actionpack (7.0.8.1) lib/abstract_controller/base.rb:215:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:165:in `process_action'
actionpack (7.0.8.1) lib/abstract_controller/callbacks.rb:234:in `block in process_action'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:118:in `block in run_callbacks'
actiontext (7.0.8.1) lib/action_text/rendering.rb:20:in `with_renderer'
actiontext (7.0.8.1) lib/action_text/engine.rb:69:in `block (4 levels) in <class:Engine>'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:127:in `instance_exec'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:127:in `block in run_callbacks'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:138:in `run_callbacks'
actionpack (7.0.8.1) lib/abstract_controller/callbacks.rb:233:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/rescue.rb:23:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `block in instrument'
activesupport (7.0.8.1) lib/active_support/notifications/instrumenter.rb:24:in `instrument'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `instrument'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:66:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (7.0.8.1) lib/active_record/railties/controller_runtime.rb:27:in `process_action'
actionpack (7.0.8.1) lib/abstract_controller/base.rb:151:in `process'
actionview (7.0.8.1) lib/action_view/rendering.rb:39:in `process'
actionpack (7.0.8.1) lib/action_controller/metal.rb:188:in `dispatch'
actionpack (7.0.8.1) lib/action_controller/metal.rb:251:in `dispatch'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `each'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:852:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
railties (7.0.8.1) lib/rails/railtie.rb:226:in `public_send'
railties (7.0.8.1) lib/rails/railtie.rb:226:in `method_missing'
actionpack (7.0.8.1) lib/action_dispatch/routing/mapper.rb:19:in `block in <class:Constraints>'
actionpack (7.0.8.1) lib/action_dispatch/routing/mapper.rb:48:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `each'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:852:in `call'
rack (2.2.9) lib/rack/etag.rb:27:in `call'
rack (2.2.9) lib/rack/conditional_get.rb:27:in `call'
rack (2.2.9) lib/rack/head.rb:12:in `call'
activerecord (7.0.8.1) lib/active_record/migration.rb:638:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:99:in `run_callbacks'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
railties (7.0.8.1) lib/rails/rack/logger.rb:40:in `call_app'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `block in call'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `block in tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:37:in `tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `tagged'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/request_id.rb:26:in `call'
rack (2.2.9) lib/rack/runtime.rb:22:in `call'
activesupport (7.0.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/static.rb:23:in `call'
rack (2.2.9) lib/rack/sendfile.rb:110:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
puma (5.6.8) lib/puma/configuration.rb:252:in `call'
puma (5.6.8) lib/puma/request.rb:77:in `block in handle_request'
puma (5.6.8) lib/puma/thread_pool.rb:340:in `with_force_shutdown'
puma (5.6.8) lib/puma/request.rb:76:in `handle_request'
puma (5.6.8) lib/puma/server.rb:443:in `process_client'
puma (5.6.8) lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Started GET "/favicon.ico" for ::1 at 2024-04-27 16:23:54 +0530
  
ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  
Started GET "/graphiql" for ::1 at 2024-04-27 16:27:25 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (2.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2611.0ms | Allocations: 216511)
Completed 500 Internal Server Error in 3098ms (ActiveRecord: 0.0ms | Allocations: 502496)


  
ActionView::Template::Error (Your application has sessions disabled. To write to the session you must first configure a session store):
    21:       graphql_endpoint_path: graphql_endpoint_path,
    22:       initial_query: GraphiQL::Rails.config.initial_query,
    23:       logo: GraphiQL::Rails.config.logo,
    24:       headers: GraphiQL::Rails.config.resolve_headers(self),
    25:       query_params: GraphiQL::Rails.config.query_params,
    26:       header_editor_enabled: GraphiQL::Rails.config.header_editor_enabled,
    27:       input_value_deprecation: GraphiQL::Rails.config.input_value_deprecation
  
actionpack (7.0.8.1) lib/action_dispatch/request/session.rb:253:in `load_for_write!'
actionpack (7.0.8.1) lib/action_dispatch/request/session.rb:151:in `[]='
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:451:in `real_csrf_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:469:in `csrf_token_hmac'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:463:in `global_csrf_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:372:in `masked_authenticity_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:359:in `form_authenticity_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:106:in `form_authenticity_token'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:17:in `block in <class:Config>'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:39:in `block in resolve_headers'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `each'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `each_with_object'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `resolve_headers'
graphiql-rails (1.10.0) app/views/graphiql/rails/editors/show.html.erb:24
actionview (7.0.8.1) lib/action_view/base.rb:244:in `public_send'
actionview (7.0.8.1) lib/action_view/base.rb:244:in `_run'
actionview (7.0.8.1) lib/action_view/template.rb:157:in `block in render'
activesupport (7.0.8.1) lib/active_support/notifications.rb:208:in `instrument'
actionview (7.0.8.1) lib/action_view/template.rb:361:in `instrument_render_template'
actionview (7.0.8.1) lib/action_view/template.rb:155:in `render'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:65:in `block (2 levels) in render_template'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `block in instrument'
activesupport (7.0.8.1) lib/active_support/notifications/instrumenter.rb:24:in `instrument'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `instrument'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:60:in `block in render_template'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:79:in `render_with_layout'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:59:in `render_template'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:11:in `render'
actionview (7.0.8.1) lib/action_view/renderer/renderer.rb:61:in `render_template_to_object'
actionview (7.0.8.1) lib/action_view/renderer/renderer.rb:29:in `render_to_object'
actionview (7.0.8.1) lib/action_view/rendering.rb:117:in `block in _render_template'
actionview (7.0.8.1) lib/action_view/base.rb:270:in `in_rendering_context'
actionview (7.0.8.1) lib/action_view/rendering.rb:116:in `_render_template'
actionpack (7.0.8.1) lib/action_controller/metal/streaming.rb:216:in `_render_template'
actionview (7.0.8.1) lib/action_view/rendering.rb:103:in `render_to_body'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:158:in `render_to_body'
actionpack (7.0.8.1) lib/action_controller/metal/renderers.rb:141:in `render_to_body'
actionpack (7.0.8.1) lib/abstract_controller/rendering.rb:27:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:139:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:22:in `block (2 levels) in render'
/home/user/.rvm/rubies/ruby-3.0.0/lib/ruby/3.0.0/benchmark.rb:308:in `realtime'
activesupport (7.0.8.1) lib/active_support/core_ext/benchmark.rb:14:in `ms'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:22:in `block in render'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:91:in `cleanup_view_runtime'
activerecord (7.0.8.1) lib/active_record/railties/controller_runtime.rb:34:in `cleanup_view_runtime'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:21:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/implicit_render.rb:35:in `default_render'
actionpack (7.0.8.1) lib/action_controller/metal/basic_implicit_render.rb:7:in `send_action'
actionpack (7.0.8.1) lib/abstract_controller/base.rb:215:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:165:in `process_action'
actionpack (7.0.8.1) lib/abstract_controller/callbacks.rb:234:in `block in process_action'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:118:in `block in run_callbacks'
actiontext (7.0.8.1) lib/action_text/rendering.rb:20:in `with_renderer'
actiontext (7.0.8.1) lib/action_text/engine.rb:69:in `block (4 levels) in <class:Engine>'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:127:in `instance_exec'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:127:in `block in run_callbacks'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:138:in `run_callbacks'
actionpack (7.0.8.1) lib/abstract_controller/callbacks.rb:233:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/rescue.rb:23:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `block in instrument'
activesupport (7.0.8.1) lib/active_support/notifications/instrumenter.rb:24:in `instrument'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `instrument'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:66:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (7.0.8.1) lib/active_record/railties/controller_runtime.rb:27:in `process_action'
actionpack (7.0.8.1) lib/abstract_controller/base.rb:151:in `process'
actionview (7.0.8.1) lib/action_view/rendering.rb:39:in `process'
actionpack (7.0.8.1) lib/action_controller/metal.rb:188:in `dispatch'
actionpack (7.0.8.1) lib/action_controller/metal.rb:251:in `dispatch'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `each'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:852:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
railties (7.0.8.1) lib/rails/railtie.rb:226:in `public_send'
railties (7.0.8.1) lib/rails/railtie.rb:226:in `method_missing'
actionpack (7.0.8.1) lib/action_dispatch/routing/mapper.rb:19:in `block in <class:Constraints>'
actionpack (7.0.8.1) lib/action_dispatch/routing/mapper.rb:48:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `each'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:852:in `call'
rack (2.2.9) lib/rack/etag.rb:27:in `call'
rack (2.2.9) lib/rack/conditional_get.rb:27:in `call'
rack (2.2.9) lib/rack/head.rb:12:in `call'
activerecord (7.0.8.1) lib/active_record/migration.rb:638:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:99:in `run_callbacks'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
railties (7.0.8.1) lib/rails/rack/logger.rb:40:in `call_app'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `block in call'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `block in tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:37:in `tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `tagged'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/request_id.rb:26:in `call'
rack (2.2.9) lib/rack/runtime.rb:22:in `call'
activesupport (7.0.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/static.rb:23:in `call'
rack (2.2.9) lib/rack/sendfile.rb:110:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
puma (5.6.8) lib/puma/configuration.rb:252:in `call'
puma (5.6.8) lib/puma/request.rb:77:in `block in handle_request'
puma (5.6.8) lib/puma/thread_pool.rb:340:in `with_force_shutdown'
puma (5.6.8) lib/puma/request.rb:76:in `handle_request'
puma (5.6.8) lib/puma/server.rb:443:in `process_client'
puma (5.6.8) lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Started GET "/graphiql" for ::1 at 2024-04-27 16:28:15 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 5.1ms | Allocations: 1962)
Completed 500 Internal Server Error in 528ms (ActiveRecord: 0.0ms | Allocations: 287942)


  
ActionView::Template::Error (Your application has sessions disabled. To write to the session you must first configure a session store):
    21:       graphql_endpoint_path: graphql_endpoint_path,
    22:       initial_query: GraphiQL::Rails.config.initial_query,
    23:       logo: GraphiQL::Rails.config.logo,
    24:       headers: GraphiQL::Rails.config.resolve_headers(self),
    25:       query_params: GraphiQL::Rails.config.query_params,
    26:       header_editor_enabled: GraphiQL::Rails.config.header_editor_enabled,
    27:       input_value_deprecation: GraphiQL::Rails.config.input_value_deprecation
  
actionpack (7.0.8.1) lib/action_dispatch/request/session.rb:253:in `load_for_write!'
actionpack (7.0.8.1) lib/action_dispatch/request/session.rb:151:in `[]='
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:451:in `real_csrf_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:469:in `csrf_token_hmac'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:463:in `global_csrf_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:372:in `masked_authenticity_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:359:in `form_authenticity_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:106:in `form_authenticity_token'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:17:in `block in <class:Config>'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:39:in `block in resolve_headers'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `each'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `each_with_object'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `resolve_headers'
graphiql-rails (1.10.0) app/views/graphiql/rails/editors/show.html.erb:24
actionview (7.0.8.1) lib/action_view/base.rb:244:in `public_send'
actionview (7.0.8.1) lib/action_view/base.rb:244:in `_run'
actionview (7.0.8.1) lib/action_view/template.rb:157:in `block in render'
activesupport (7.0.8.1) lib/active_support/notifications.rb:208:in `instrument'
actionview (7.0.8.1) lib/action_view/template.rb:361:in `instrument_render_template'
actionview (7.0.8.1) lib/action_view/template.rb:155:in `render'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:65:in `block (2 levels) in render_template'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `block in instrument'
activesupport (7.0.8.1) lib/active_support/notifications/instrumenter.rb:24:in `instrument'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `instrument'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:60:in `block in render_template'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:79:in `render_with_layout'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:59:in `render_template'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:11:in `render'
actionview (7.0.8.1) lib/action_view/renderer/renderer.rb:61:in `render_template_to_object'
actionview (7.0.8.1) lib/action_view/renderer/renderer.rb:29:in `render_to_object'
actionview (7.0.8.1) lib/action_view/rendering.rb:117:in `block in _render_template'
actionview (7.0.8.1) lib/action_view/base.rb:270:in `in_rendering_context'
actionview (7.0.8.1) lib/action_view/rendering.rb:116:in `_render_template'
actionpack (7.0.8.1) lib/action_controller/metal/streaming.rb:216:in `_render_template'
actionview (7.0.8.1) lib/action_view/rendering.rb:103:in `render_to_body'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:158:in `render_to_body'
actionpack (7.0.8.1) lib/action_controller/metal/renderers.rb:141:in `render_to_body'
actionpack (7.0.8.1) lib/abstract_controller/rendering.rb:27:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:139:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:22:in `block (2 levels) in render'
/home/user/.rvm/rubies/ruby-3.0.0/lib/ruby/3.0.0/benchmark.rb:308:in `realtime'
activesupport (7.0.8.1) lib/active_support/core_ext/benchmark.rb:14:in `ms'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:22:in `block in render'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:91:in `cleanup_view_runtime'
activerecord (7.0.8.1) lib/active_record/railties/controller_runtime.rb:34:in `cleanup_view_runtime'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:21:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/implicit_render.rb:35:in `default_render'
actionpack (7.0.8.1) lib/action_controller/metal/basic_implicit_render.rb:7:in `send_action'
actionpack (7.0.8.1) lib/abstract_controller/base.rb:215:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:165:in `process_action'
actionpack (7.0.8.1) lib/abstract_controller/callbacks.rb:234:in `block in process_action'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:118:in `block in run_callbacks'
actiontext (7.0.8.1) lib/action_text/rendering.rb:20:in `with_renderer'
actiontext (7.0.8.1) lib/action_text/engine.rb:69:in `block (4 levels) in <class:Engine>'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:127:in `instance_exec'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:127:in `block in run_callbacks'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:138:in `run_callbacks'
actionpack (7.0.8.1) lib/abstract_controller/callbacks.rb:233:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/rescue.rb:23:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `block in instrument'
activesupport (7.0.8.1) lib/active_support/notifications/instrumenter.rb:24:in `instrument'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `instrument'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:66:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (7.0.8.1) lib/active_record/railties/controller_runtime.rb:27:in `process_action'
actionpack (7.0.8.1) lib/abstract_controller/base.rb:151:in `process'
actionview (7.0.8.1) lib/action_view/rendering.rb:39:in `process'
actionpack (7.0.8.1) lib/action_controller/metal.rb:188:in `dispatch'
actionpack (7.0.8.1) lib/action_controller/metal.rb:251:in `dispatch'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `each'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:852:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
railties (7.0.8.1) lib/rails/railtie.rb:226:in `public_send'
railties (7.0.8.1) lib/rails/railtie.rb:226:in `method_missing'
actionpack (7.0.8.1) lib/action_dispatch/routing/mapper.rb:19:in `block in <class:Constraints>'
actionpack (7.0.8.1) lib/action_dispatch/routing/mapper.rb:48:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `each'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:852:in `call'
rack (2.2.9) lib/rack/etag.rb:27:in `call'
rack (2.2.9) lib/rack/conditional_get.rb:27:in `call'
rack (2.2.9) lib/rack/head.rb:12:in `call'
activerecord (7.0.8.1) lib/active_record/migration.rb:638:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:99:in `run_callbacks'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
railties (7.0.8.1) lib/rails/rack/logger.rb:40:in `call_app'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `block in call'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `block in tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:37:in `tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `tagged'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/request_id.rb:26:in `call'
rack (2.2.9) lib/rack/runtime.rb:22:in `call'
activesupport (7.0.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/static.rb:23:in `call'
rack (2.2.9) lib/rack/sendfile.rb:110:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
puma (5.6.8) lib/puma/configuration.rb:252:in `call'
puma (5.6.8) lib/puma/request.rb:77:in `block in handle_request'
puma (5.6.8) lib/puma/thread_pool.rb:340:in `with_force_shutdown'
puma (5.6.8) lib/puma/request.rb:76:in `handle_request'
puma (5.6.8) lib/puma/server.rb:443:in `process_client'
puma (5.6.8) lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Started GET "/graphiql" for ::1 at 2024-04-27 16:31:05 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.7ms | Allocations: 353)
Completed 500 Internal Server Error in 4ms (ActiveRecord: 0.0ms | Allocations: 638)


  
ActionView::Template::Error (Your application has sessions disabled. To write to the session you must first configure a session store):
    21:       graphql_endpoint_path: graphql_endpoint_path,
    22:       initial_query: GraphiQL::Rails.config.initial_query,
    23:       logo: GraphiQL::Rails.config.logo,
    24:       headers: GraphiQL::Rails.config.resolve_headers(self),
    25:       query_params: GraphiQL::Rails.config.query_params,
    26:       header_editor_enabled: GraphiQL::Rails.config.header_editor_enabled,
    27:       input_value_deprecation: GraphiQL::Rails.config.input_value_deprecation
  
actionpack (7.0.8.1) lib/action_dispatch/request/session.rb:253:in `load_for_write!'
actionpack (7.0.8.1) lib/action_dispatch/request/session.rb:151:in `[]='
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:451:in `real_csrf_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:469:in `csrf_token_hmac'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:463:in `global_csrf_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:372:in `masked_authenticity_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:359:in `form_authenticity_token'
actionpack (7.0.8.1) lib/action_controller/metal/request_forgery_protection.rb:106:in `form_authenticity_token'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:17:in `block in <class:Config>'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:39:in `block in resolve_headers'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `each'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `each_with_object'
graphiql-rails (1.10.0) lib/graphiql/rails/config.rb:38:in `resolve_headers'
graphiql-rails (1.10.0) app/views/graphiql/rails/editors/show.html.erb:24
actionview (7.0.8.1) lib/action_view/base.rb:244:in `public_send'
actionview (7.0.8.1) lib/action_view/base.rb:244:in `_run'
actionview (7.0.8.1) lib/action_view/template.rb:157:in `block in render'
activesupport (7.0.8.1) lib/active_support/notifications.rb:208:in `instrument'
actionview (7.0.8.1) lib/action_view/template.rb:361:in `instrument_render_template'
actionview (7.0.8.1) lib/action_view/template.rb:155:in `render'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:65:in `block (2 levels) in render_template'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `block in instrument'
activesupport (7.0.8.1) lib/active_support/notifications/instrumenter.rb:24:in `instrument'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `instrument'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:60:in `block in render_template'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:79:in `render_with_layout'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:59:in `render_template'
actionview (7.0.8.1) lib/action_view/renderer/template_renderer.rb:11:in `render'
actionview (7.0.8.1) lib/action_view/renderer/renderer.rb:61:in `render_template_to_object'
actionview (7.0.8.1) lib/action_view/renderer/renderer.rb:29:in `render_to_object'
actionview (7.0.8.1) lib/action_view/rendering.rb:117:in `block in _render_template'
actionview (7.0.8.1) lib/action_view/base.rb:270:in `in_rendering_context'
actionview (7.0.8.1) lib/action_view/rendering.rb:116:in `_render_template'
actionpack (7.0.8.1) lib/action_controller/metal/streaming.rb:216:in `_render_template'
actionview (7.0.8.1) lib/action_view/rendering.rb:103:in `render_to_body'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:158:in `render_to_body'
actionpack (7.0.8.1) lib/action_controller/metal/renderers.rb:141:in `render_to_body'
actionpack (7.0.8.1) lib/abstract_controller/rendering.rb:27:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:139:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:22:in `block (2 levels) in render'
/home/user/.rvm/rubies/ruby-3.0.0/lib/ruby/3.0.0/benchmark.rb:308:in `realtime'
activesupport (7.0.8.1) lib/active_support/core_ext/benchmark.rb:14:in `ms'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:22:in `block in render'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:91:in `cleanup_view_runtime'
activerecord (7.0.8.1) lib/active_record/railties/controller_runtime.rb:34:in `cleanup_view_runtime'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:21:in `render'
actionpack (7.0.8.1) lib/action_controller/metal/implicit_render.rb:35:in `default_render'
actionpack (7.0.8.1) lib/action_controller/metal/basic_implicit_render.rb:7:in `send_action'
actionpack (7.0.8.1) lib/abstract_controller/base.rb:215:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/rendering.rb:165:in `process_action'
actionpack (7.0.8.1) lib/abstract_controller/callbacks.rb:234:in `block in process_action'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:118:in `block in run_callbacks'
actiontext (7.0.8.1) lib/action_text/rendering.rb:20:in `with_renderer'
actiontext (7.0.8.1) lib/action_text/engine.rb:69:in `block (4 levels) in <class:Engine>'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:127:in `instance_exec'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:127:in `block in run_callbacks'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:138:in `run_callbacks'
actionpack (7.0.8.1) lib/abstract_controller/callbacks.rb:233:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/rescue.rb:23:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `block in instrument'
activesupport (7.0.8.1) lib/active_support/notifications/instrumenter.rb:24:in `instrument'
activesupport (7.0.8.1) lib/active_support/notifications.rb:206:in `instrument'
actionpack (7.0.8.1) lib/action_controller/metal/instrumentation.rb:66:in `process_action'
actionpack (7.0.8.1) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (7.0.8.1) lib/active_record/railties/controller_runtime.rb:27:in `process_action'
actionpack (7.0.8.1) lib/abstract_controller/base.rb:151:in `process'
actionview (7.0.8.1) lib/action_view/rendering.rb:39:in `process'
actionpack (7.0.8.1) lib/action_controller/metal.rb:188:in `dispatch'
actionpack (7.0.8.1) lib/action_controller/metal.rb:251:in `dispatch'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `each'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:852:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
railties (7.0.8.1) lib/rails/railtie.rb:226:in `public_send'
railties (7.0.8.1) lib/rails/railtie.rb:226:in `method_missing'
actionpack (7.0.8.1) lib/action_dispatch/routing/mapper.rb:19:in `block in <class:Constraints>'
actionpack (7.0.8.1) lib/action_dispatch/routing/mapper.rb:48:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `each'
actionpack (7.0.8.1) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.8.1) lib/action_dispatch/routing/route_set.rb:852:in `call'
rack (2.2.9) lib/rack/etag.rb:27:in `call'
rack (2.2.9) lib/rack/conditional_get.rb:27:in `call'
rack (2.2.9) lib/rack/head.rb:12:in `call'
activerecord (7.0.8.1) lib/active_record/migration.rb:638:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
activesupport (7.0.8.1) lib/active_support/callbacks.rb:99:in `run_callbacks'
actionpack (7.0.8.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
railties (7.0.8.1) lib/rails/rack/logger.rb:40:in `call_app'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `block in call'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `block in tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:37:in `tagged'
activesupport (7.0.8.1) lib/active_support/tagged_logging.rb:99:in `tagged'
railties (7.0.8.1) lib/rails/rack/logger.rb:25:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/request_id.rb:26:in `call'
rack (2.2.9) lib/rack/runtime.rb:22:in `call'
activesupport (7.0.8.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (7.0.8.1) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/static.rb:23:in `call'
rack (2.2.9) lib/rack/sendfile.rb:110:in `call'
actionpack (7.0.8.1) lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
railties (7.0.8.1) lib/rails/engine.rb:530:in `call'
puma (5.6.8) lib/puma/configuration.rb:252:in `call'
puma (5.6.8) lib/puma/request.rb:77:in `block in handle_request'
puma (5.6.8) lib/puma/thread_pool.rb:340:in `with_force_shutdown'
puma (5.6.8) lib/puma/request.rb:76:in `handle_request'
puma (5.6.8) lib/puma/server.rb:443:in `process_client'
puma (5.6.8) lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Started GET "/graphiql" for ::1 at 2024-04-27 16:31:15 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 11.7ms | Allocations: 1440)
Completed 200 OK in 482ms (Views: 16.3ms | ActiveRecord: 0.0ms | Allocations: 286906)


Started POST "/graphql" for ::1 at 2024-04-27 16:31:16 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 122ms (Views: 12.7ms | ActiveRecord: 0.0ms | Allocations: 17895)


Started POST "/graphql" for ::1 at 2024-04-27 16:31:29 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n\n"}}
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.0ms | Allocations: 285)


Started POST "/graphql" for ::1 at 2024-04-27 16:32:06 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  testField\n}query\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  testField\n}query\n"}}
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.0ms | Allocations: 390)


Started POST "/graphql" for ::1 at 2024-04-27 16:32:21 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  testField\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  testField\n}\n"}}
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.0ms | Allocations: 458)


Started POST "/graphql" for ::1 at 2024-04-27 16:33:00 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  testField\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  testField\n}\n"}}
Completed 200 OK in 20ms (Views: 6.4ms | ActiveRecord: 0.0ms | Allocations: 2632)


Started POST "/graphql" for ::1 at 2024-04-27 22:25:47 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  testField\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  testField\n}\n"}}
Completed 200 OK in 1634ms (Views: 199.5ms | ActiveRecord: 0.0ms | Allocations: 449)


Started GET "/graphiql" for ::1 at 2024-04-27 22:33:18 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (27.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 9.2ms | Allocations: 1532)
Completed 200 OK in 3249ms (Views: 53.4ms | ActiveRecord: 0.0ms | Allocations: 287007)


Started POST "/graphql" for ::1 at 2024-04-27 22:33:22 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 262ms (Views: 6.2ms | ActiveRecord: 0.0ms | Allocations: 17517)


Started GET "/graphiql" for ::1 at 2024-04-27 22:37:04 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.6ms | Allocations: 580)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms | Allocations: 1305)


Started POST "/graphql" for ::1 at 2024-04-27 22:37:05 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 110ms (Views: 7.4ms | ActiveRecord: 0.0ms | Allocations: 18076)


Started POST "/graphql" for ::1 at 2024-04-27 22:37:35 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n  }\n}\n"}}
  [1m[36mBlog Load (1.2ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
Completed 200 OK in 86ms (Views: 0.6ms | ActiveRecord: 12.7ms | Allocations: 20161)


Started POST "/graphql" for ::1 at 2024-04-27 22:37:58 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    \n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    \n  }\n}\n"}}
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.0ms | Allocations: 568)


Started POST "/graphql" for ::1 at 2024-04-27 22:38:14 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n  }\n}\n"}}
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
Completed 200 OK in 9ms (Views: 1.0ms | ActiveRecord: 0.5ms | Allocations: 1894)


Started POST "/graphql" for ::1 at 2024-04-27 22:38:31 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n"}}
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.9ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (1.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.8ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 243ms (Views: 0.8ms | ActiveRecord: 14.2ms | Allocations: 32839)


Started GET "/graphiql" for ::1 at 2024-04-27 22:38:46 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.6ms | Allocations: 570)
Completed 200 OK in 4ms (Views: 3.4ms | ActiveRecord: 0.0ms | Allocations: 1291)


Started POST "/graphql" for ::1 at 2024-04-27 22:38:46 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 99ms (Views: 8.5ms | ActiveRecord: 0.0ms | Allocations: 17714)


Started POST "/graphql" for ::1 at 2024-04-27 22:38:52 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n"}}
Completed 200 OK in 11ms (Views: 0.5ms | ActiveRecord: 0.0ms | Allocations: 597)


Started GET "/graphiql" for ::1 at 2024-04-27 22:39:03 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.5ms | Allocations: 558)
Completed 200 OK in 4ms (Views: 3.5ms | ActiveRecord: 0.0ms | Allocations: 1278)


Started POST "/graphql" for ::1 at 2024-04-27 22:39:03 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 112ms (Views: 13.6ms | ActiveRecord: 0.0ms | Allocations: 17904)


Started POST "/graphql" for ::1 at 2024-04-27 22:39:05 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n"}}
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 107ms (Views: 0.8ms | ActiveRecord: 20.0ms | Allocations: 19034)


Started GET "/graphiql" for ::1 at 2024-04-27 22:39:24 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.6ms | Allocations: 575)
Completed 200 OK in 4ms (Views: 3.4ms | ActiveRecord: 0.0ms | Allocations: 1293)


Started POST "/graphql" for ::1 at 2024-04-27 22:39:24 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 169ms (Views: 16.2ms | ActiveRecord: 0.0ms | Allocations: 17891)


Started POST "/graphql" for ::1 at 2024-04-27 22:39:25 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n"}}
              Failed to implement Blog.id, tried:

              - `Types::BlogType#id`, which did not exist
              - `Blog::ActiveRecord_Relation#id`, which did not exist
              - Looking up hash key `:id` or `"id"` on `#<Blog::ActiveRecord_Relation:0x00007f9fb80ef100>`, but it wasn't a Hash

              To implement this field, define one of the methods above (and check for typos), or supply a `fallback_value`.

/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:710:in `block (2 levels) in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:817:in `with_extensions'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:654:in `block in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:652:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:367:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/tracing/trace.rb:52:in `execute_field'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:366:in `block in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:718:in `call_method_on_directives'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:354:in `evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:264:in `evaluate_selection'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:214:in `block (2 levels) in evaluate_selections'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:252:in `block in spawn_job_fiber'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:233:in `block in spawn_fiber'
Completed 500 Internal Server Error in 11ms (Views: 1.0ms | ActiveRecord: 0.0ms | Allocations: 2454)


Started GET "/graphiql" for ::1 at 2024-04-27 22:39:57 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.4ms | Allocations: 559)
Completed 200 OK in 4ms (Views: 3.3ms | ActiveRecord: 0.0ms | Allocations: 1278)


Started POST "/graphql" for ::1 at 2024-04-27 22:39:57 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 87ms (Views: 13.2ms | ActiveRecord: 0.0ms | Allocations: 17995)


Started POST "/graphql" for ::1 at 2024-04-27 22:39:59 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n  }\n}\n"}}
  [1m[36mBlog Load (0.9ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 113ms (Views: 1.1ms | ActiveRecord: 22.6ms | Allocations: 19054)


Started POST "/graphql" for ::1 at 2024-04-27 22:42:19 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n    created_at\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n    created_at\n  }\n}\n"}}
Completed 200 OK in 3ms (Views: 0.5ms | ActiveRecord: 0.0ms | Allocations: 592)


Started POST "/graphql" for ::1 at 2024-04-27 22:42:23 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n    createdAt\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userName\n    createdAt\n  }\n}\n"}}
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 78ms (Views: 1.1ms | ActiveRecord: 3.7ms | Allocations: 12451)


Started POST "/graphql" for ::1 at 2024-04-27 22:43:55 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n"}}
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (1.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 69ms (Views: 1.8ms | ActiveRecord: 3.6ms | Allocations: 12545)


Started GET "/graphiql" for ::1 at 2024-04-27 22:45:41 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.4ms | Allocations: 555)
Completed 200 OK in 4ms (Views: 3.5ms | ActiveRecord: 0.0ms | Allocations: 1273)


Started POST "/graphql" for ::1 at 2024-04-27 22:45:41 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 88ms (Views: 14.8ms | ActiveRecord: 0.0ms | Allocations: 18349)


Started POST "/graphql" for ::1 at 2024-04-27 22:46:52 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n"}}
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (1.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 151ms (Views: 1.3ms | ActiveRecord: 19.6ms | Allocations: 22180)


Started GET "/graphiql" for ::1 at 2024-04-27 22:49:52 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 3.3ms | Allocations: 569)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms | Allocations: 1287)


Started POST "/graphql" for ::1 at 2024-04-27 22:49:53 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 101ms (Views: 15.9ms | ActiveRecord: 0.0ms | Allocations: 15713)


Started POST "/graphql" for ::1 at 2024-04-27 22:50:19 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n  }\n}\n", "operationName"=>"getBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n  }\n}\n", "operationName"=>"getBlog"}}
Completed 200 OK in 4ms (Views: 0.8ms | ActiveRecord: 0.0ms | Allocations: 693)


Started POST "/graphql" for ::1 at 2024-04-27 22:50:49 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n  }\n}\n", "variables"=>{"id"=>1}, "operationName"=>"getBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n  }\n}\n", "variables"=>{"id"=>1}, "operationName"=>"getBlog"}}
  [1m[36mBlog Load (0.7ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:40:in `blog'
Completed 200 OK in 11ms (Views: 0.3ms | ActiveRecord: 0.7ms | Allocations: 1213)


Started POST "/graphql" for ::1 at 2024-04-27 22:51:07 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>1}, "operationName"=>"getBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>1}, "operationName"=>"getBlog"}}
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:40:in `blog'
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 12ms (Views: 0.9ms | ActiveRecord: 1.2ms | Allocations: 1573)


Started POST "/graphql" for ::1 at 2024-04-27 22:51:13 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>1}, "operationName"=>"getBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>1}, "operationName"=>"getBlog"}}
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:40:in `blog'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 9ms (Views: 0.4ms | ActiveRecord: 1.1ms | Allocations: 1590)


Started POST "/graphql" for ::1 at 2024-04-27 22:51:21 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>20}, "operationName"=>"getBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>20}, "operationName"=>"getBlog"}}
  [1m[36mBlog Load (1.0ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 20], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:40:in `blog'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 12ms (Views: 0.4ms | ActiveRecord: 1.4ms | Allocations: 1589)


  [1m[36mBlog Load (23.3ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" ORDER BY "blogs"."id" DESC LIMIT $1[0m  [["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2024-04-27 22:55:23 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>18}, "operationName"=>"getBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>18}, "operationName"=>"getBlog"}}
  [1m[36mBlog Load (0.7ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 18], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:40:in `blog'
  [1m[36mUser Load (10.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 21ms (Views: 0.4ms | ActiveRecord: 10.9ms | Allocations: 1590)


Started GET "/graphiql" for ::1 at 2024-04-27 22:59:22 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 9.5ms | Allocations: 1532)
Completed 200 OK in 509ms (Views: 13.6ms | ActiveRecord: 0.0ms | Allocations: 286998)


Started POST "/graphql" for ::1 at 2024-04-27 22:59:23 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 119ms (Views: 17.5ms | ActiveRecord: 0.0ms | Allocations: 21735)


Started POST "/graphql" for ::1 at 2024-04-27 23:00:42 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (7.4ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 80ms (Views: 0.6ms | ActiveRecord: 17.0ms | Allocations: 20712)


Started POST "/graphql" for ::1 at 2024-04-27 23:01:16 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
Completed 200 OK in 17ms (Views: 0.5ms | ActiveRecord: 0.0ms | Allocations: 3840)


Started POST "/graphql" for ::1 at 2024-04-27 23:01:24 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 58ms (Views: 0.8ms | ActiveRecord: 7.8ms | Allocations: 7754)


Started POST "/graphql" for ::1 at 2024-04-27 23:01:33 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 12ms (Views: 0.7ms | ActiveRecord: 0.5ms | Allocations: 1400)


Started POST "/graphql" for ::1 at 2024-04-27 23:02:42 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 46ms (Views: 0.7ms | ActiveRecord: 8.9ms | Allocations: 7884)


Started POST "/graphql" for ::1 at 2024-04-27 23:03:21 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 93ms (Views: 0.9ms | ActiveRecord: 10.1ms | Allocations: 44620)


Started POST "/graphql" for ::1 at 2024-04-27 23:04:16 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (1.1ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 84ms (Views: 0.7ms | ActiveRecord: 7.4ms | Allocations: 44575)


Started POST "/graphql" for ::1 at 2024-04-27 23:05:07 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
uninitialized constant Types::UserType::Json
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/object.rb:118:in `const_missing'
/home/user/Desktop/graphql_app/app/graphql/types/user_type.rb:11:in `<class:UserType>'
/home/user/Desktop/graphql_app/app/graphql/types/user_type.rb:4:in `<module:Types>'
/home/user/Desktop/graphql_app/app/graphql/types/user_type.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/types/query_type.rb:44:in `<class:QueryType>'
/home/user/Desktop/graphql_app/app/graphql/types/query_type.rb:4:in `<module:Types>'
/home/user/Desktop/graphql_app/app/graphql/types/query_type.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:5:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 17ms (Views: 2.5ms | ActiveRecord: 0.0ms | Allocations: 3847)


Started POST "/graphql" for ::1 at 2024-04-27 23:05:20 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
undefined local variable or method `json' for Types::UserType:Class
Did you mean?  JSON
/home/user/Desktop/graphql_app/app/graphql/types/user_type.rb:11:in `<class:UserType>'
/home/user/Desktop/graphql_app/app/graphql/types/user_type.rb:4:in `<module:Types>'
/home/user/Desktop/graphql_app/app/graphql/types/user_type.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/types/query_type.rb:44:in `<class:QueryType>'
/home/user/Desktop/graphql_app/app/graphql/types/query_type.rb:4:in `<module:Types>'
/home/user/Desktop/graphql_app/app/graphql/types/query_type.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:5:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 24ms (Views: 2.3ms | ActiveRecord: 0.0ms | Allocations: 5007)


Started POST "/graphql" for ::1 at 2024-04-27 23:05:32 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 52ms (Views: 0.4ms | ActiveRecord: 7.6ms | Allocations: 7868)


Started POST "/graphql" for ::1 at 2024-04-27 23:06:08 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 49ms (Views: 0.5ms | ActiveRecord: 10.5ms | Allocations: 7934)


Started POST "/graphql" for ::1 at 2024-04-27 23:06:48 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  [1m[36mBlog Load (1.0ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1 /* loading for inspect */ LIMIT $2[0m  [["user_id", 1], ["LIMIT", 11]]
  ↳ app/graphql/types/user_type.rb:15:in `first_name'
  [1m[36mBlog Count (30.3ms)[0m  [1m[34mSELECT COUNT(*) FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 1]]
  ↳ (byebug):1:in `first_name'
  [1m[36mBlog Count (1.3ms)[0m  [1m[34mSELECT COUNT(*) FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 2]]
  ↳ (byebug):1:in `first_name'
  [1m[36mBlog Load (0.7ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1 /* loading for inspect */ LIMIT $2[0m  [["user_id", 2], ["LIMIT", 11]]
  ↳ app/graphql/types/user_type.rb:15:in `first_name'
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1 ORDER BY "blogs"."id" ASC LIMIT $2[0m  [["user_id", 2], ["LIMIT", 1]]
  ↳ (byebug):1:in `first_name'
Completed 200 OK in 41361ms (Views: 0.8ms | ActiveRecord: 51.8ms | Allocations: 123726)


Started POST "/graphql" for ::1 at 2024-04-27 23:08:43 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (1.6ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 47ms (Views: 1.4ms | ActiveRecord: 8.3ms | Allocations: 8536)


Started POST "/graphql" for ::1 at 2024-04-27 23:10:03 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 50ms (Views: 0.7ms | ActiveRecord: 8.5ms | Allocations: 7978)


Started POST "/graphql" for ::1 at 2024-04-27 23:10:26 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
Completed 200 OK in 69ms (Views: 0.8ms | ActiveRecord: 10.2ms | Allocations: 7863)


Started POST "/graphql" for ::1 at 2024-04-27 23:10:49 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs\n  }\n}\n", "variables"=>{"id"=>18}}}
Completed 200 OK in 19ms (Views: 0.7ms | ActiveRecord: 0.0ms | Allocations: 3552)


Started GET "/graphiql" for ::1 at 2024-04-27 23:10:56 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 9.7ms | Allocations: 1547)
Completed 200 OK in 534ms (Views: 15.2ms | ActiveRecord: 0.0ms | Allocations: 286973)


Started POST "/graphql" for ::1 at 2024-04-27 23:10:57 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 125ms (Views: 18.7ms | ActiveRecord: 0.0ms | Allocations: 18141)


Started POST "/graphql" for ::1 at 2024-04-27 23:12:06 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      title\n    }\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      title\n    }\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1 /* loading for inspect */ LIMIT $2[0m  [["user_id", 1], ["LIMIT", 11]]
  ↳ app/graphql/types/user_type.rb:15:in `blogs'
Failed to build a GraphQL list result for field `User.blogs` at path `users.0.blogs`.
Expected `#<User id: 1, first_name: "Efren", last_name: "Rau", email: "efren@test.com", created_at: "2024-04-27 10:34:10.803108000 +0000", updated_at: "2024-04-27 10:34:10.803108000 +0000">` (User) to implement `.each` to satisfy the GraphQL return type `[Blog!]`.

/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:681:in `rescue in continue_field'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:662:in `continue_field'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:383:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:839:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:378:in `block in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:718:in `call_method_on_directives'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:354:in `evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:264:in `evaluate_selection'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:214:in `block (2 levels) in evaluate_selections'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:252:in `block in spawn_job_fiber'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:233:in `block in spawn_fiber'
Completed 500 Internal Server Error in 13737ms (Views: 0.9ms | ActiveRecord: 18.4ms | Allocations: 15039)


Started POST "/graphql" for ::1 at 2024-04-27 23:12:32 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      title\n    }\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      title\n    }\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 1]]
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 2]]
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 3]]
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 4]]
  [1m[36mBlog Load (0.7ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 5]]
Completed 200 OK in 6017ms (Views: 0.9ms | ActiveRecord: 18.3ms | Allocations: 23351)


Started POST "/graphql" for ::1 at 2024-04-27 23:13:28 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n", "variables"=>{"id"=>18}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n", "variables"=>{"id"=>18}}}
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 1]]
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 2]]
  [1m[36mBlog Load (1.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 3]]
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 4]]
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 5]]
Completed 200 OK in 109ms (Views: 3.0ms | ActiveRecord: 23.7ms | Allocations: 15695)


Started GET "/graphiql" for ::1 at 2024-04-27 23:15:10 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.7ms | Allocations: 562)
Completed 200 OK in 4ms (Views: 3.5ms | ActiveRecord: 0.0ms | Allocations: 1283)


Started POST "/graphql" for ::1 at 2024-04-27 23:15:10 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 104ms (Views: 14.8ms | ActiveRecord: 0.0ms | Allocations: 20493)


Started POST "/graphql" for ::1 at 2024-04-27 23:16:17 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n  }\n}\n", "variables"=>{"id"=>18}, "operationName"=>"getUser", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n  }\n}\n", "variables"=>{"id"=>18}, "operationName"=>"getUser"}}
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 18], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:54:in `user'
Couldn't find User with 'id'=18
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/core.rb:284:in `find'
/home/user/Desktop/graphql_app/app/graphql/types/query_type.rb:54:in `user'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `block (2 levels) in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:817:in `with_extensions'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:654:in `block in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:652:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:367:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/tracing/trace.rb:52:in `execute_field'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:366:in `block in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:718:in `call_method_on_directives'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:354:in `evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:331:in `block in evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:839:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:279:in `evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:273:in `block in evaluate_selection'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/arguments_cache.rb:51:in `block in dataload_for'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/member/has_arguments.rb:300:in `block (3 levels) in coerce_arguments'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:252:in `block in spawn_job_fiber'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:233:in `block in spawn_fiber'
Completed 500 Internal Server Error in 41ms (Views: 0.7ms | ActiveRecord: 7.8ms | Allocations: 4579)


Started POST "/graphql" for ::1 at 2024-04-27 23:16:25 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n  }\n}\n", "variables"=>{"id"=>5}, "operationName"=>"getUser", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n  }\n}\n", "variables"=>{"id"=>5}, "operationName"=>"getUser"}}
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:54:in `user'
Completed 200 OK in 24ms (Views: 0.9ms | ActiveRecord: 0.7ms | Allocations: 2362)


Started POST "/graphql" for ::1 at 2024-04-27 23:20:46 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      email\n    }\n  }\n}\n", "variables"=>{"id"=>5}, "operationName"=>"getUser", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      email\n    }\n  }\n}\n", "variables"=>{"id"=>5}, "operationName"=>"getUser"}}
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 0.0ms | Allocations: 738)


Started POST "/graphql" for ::1 at 2024-04-27 23:20:56 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n    }\n  }\n}\n", "variables"=>{"id"=>5}, "operationName"=>"getUser", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n    }\n  }\n}\n", "variables"=>{"id"=>5}, "operationName"=>"getUser"}}
  [1m[36mUser Load (0.8ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:54:in `user'
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 5]]
Completed 200 OK in 47ms (Views: 1.4ms | ActiveRecord: 7.0ms | Allocations: 6603)


Started POST "/graphql" for ::1 at 2024-04-27 23:21:12 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n", "variables"=>{"id"=>5}, "operationName"=>"getUser", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n", "variables"=>{"id"=>5}, "operationName"=>"getUser"}}
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:54:in `user'
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 5]]
Completed 200 OK in 14ms (Views: 0.6ms | ActiveRecord: 1.2ms | Allocations: 2099)


Started POST "/graphql" for ::1 at 2024-04-27 23:21:28 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n", "variables"=>{"id"=>2}, "operationName"=>"getUser", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n", "variables"=>{"id"=>2}, "operationName"=>"getUser"}}
  [1m[36mUser Load (3.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:54:in `user'
  [1m[36mBlog Load (1.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 2]]
Completed 200 OK in 17ms (Views: 0.7ms | ActiveRecord: 4.5ms | Allocations: 1960)


Started POST "/graphql" for ::1 at 2024-04-27 23:25:18 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n", "variables"=>{"id"=>2}, "operationName"=>"getUser", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n", "variables"=>{"id"=>2}, "operationName"=>"getUser"}}
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:54:in `user'
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 2]]
Completed 200 OK in 29356ms (Views: 0.7ms | ActiveRecord: 12.2ms | Allocations: 172148)


Started POST "/graphql" for ::1 at 2024-04-27 23:26:08 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n", "variables"=>{"id"=>2}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n", "variables"=>{"id"=>2}}}
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 1]]
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 2]]
  [1m[36mBlog Load (0.3ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 3]]
  [1m[36mBlog Load (0.3ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 4]]
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 5]]
Completed 200 OK in 18444ms (Views: 1.5ms | ActiveRecord: 2.7ms | Allocations: 115935)


Started POST "/graphql" for ::1 at 2024-04-27 23:27:30 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n", "variables"=>{"id"=>2}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n", "variables"=>{"id"=>2}}}
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (2.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 14170ms (Views: 1.1ms | ActiveRecord: 5.0ms | Allocations: 121895)


Started GET "/graphiql" for ::1 at 2024-04-27 23:27:47 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 3.8ms | Allocations: 564)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms | Allocations: 1284)


Started POST "/graphql" for ::1 at 2024-04-27 23:27:48 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Started POST "/graphql" for ::1 at 2024-04-27 23:28:05 +0530
Completed 200 OK in 17383ms (Views: 11.1ms | ActiveRecord: 0.0ms | Allocations: 127769)


Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n", "variables"=>{"id"=>2}, "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n", "variables"=>{"id"=>2}}}
  [1m[36mBlog Load (0.8ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (1.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 11626ms (Views: 1.7ms | ActiveRecord: 4.3ms | Allocations: 121284)


Started GET "/graphiql" for ::1 at 2024-04-27 23:43:27 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 10.4ms | Allocations: 1542)
Completed 200 OK in 728ms (Views: 16.8ms | ActiveRecord: 0.0ms | Allocations: 287005)


Started POST "/graphql" for ::1 at 2024-04-27 23:43:28 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 86ms (Views: 14.3ms | ActiveRecord: 0.0ms | Allocations: 22129)


Started POST "/graphql" for ::1 at 2024-04-27 23:44:03 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n{\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n"}}
  [1m[36mBlog Load (3.0ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (1.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 185ms (Views: 2.4ms | ActiveRecord: 21.6ms | Allocations: 51696)


Started GET "/graphiql" for ::1 at 2024-04-28 00:01:19 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 10.7ms | Allocations: 1544)
Completed 200 OK in 463ms (Views: 15.7ms | ActiveRecord: 0.0ms | Allocations: 287013)


Started POST "/graphql" for ::1 at 2024-04-28 00:01:20 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
uninitialized constant Types::BlogInputType
Did you mean?  Types::BlogType
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:9:in `<class:BlogCreate>'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:4:in `<module:Mutations>'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 43ms (Views: 2.7ms | ActiveRecord: 0.0ms | Allocations: 4932)


Started GET "/graphiql" for ::1 at 2024-04-28 00:02:15 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.8ms | Allocations: 574)
Completed 200 OK in 4ms (Views: 3.7ms | ActiveRecord: 0.0ms | Allocations: 1299)


Started POST "/graphql" for ::1 at 2024-04-28 00:02:15 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Invalid input type for BlogCreate.blogInput: Blog. Must be scalar, enum, or input object, not OBJECT.
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:397:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:395:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:178:in `type='
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:195:in `type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:211:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:199:in `block (2 levels) in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:55:in `block in add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:17:in `initialize'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `new'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:446:in `mutation'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 27ms (Views: 2.6ms | ActiveRecord: 0.0ms | Allocations: 3585)


Started GET "/graphiql" for ::1 at 2024-04-28 00:02:36 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.1ms | Allocations: 519)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms | Allocations: 829)


Started POST "/graphql" for ::1 at 2024-04-28 00:02:36 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Second definition of `mutation(...)` (Types::MutationType) is invalid, already configured with Types::MutationType
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:443:in `mutation'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 3ms (Views: 1.4ms | ActiveRecord: 0.0ms | Allocations: 793)


Started GET "/graphiql" for ::1 at 2024-04-28 00:06:24 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 10.2ms | Allocations: 1522)
Completed 200 OK in 614ms (Views: 16.0ms | ActiveRecord: 0.0ms | Allocations: 286991)


Started POST "/graphql" for ::1 at 2024-04-28 00:06:25 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Invalid input type for BlogCreate.blogInput: Blog. Must be scalar, enum, or input object, not OBJECT.
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:397:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:395:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:178:in `type='
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:195:in `type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:211:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:199:in `block (2 levels) in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:55:in `block in add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:17:in `initialize'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `new'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:446:in `mutation'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 26ms (Views: 2.0ms | ActiveRecord: 0.0ms | Allocations: 3956)


Started GET "/graphiql" for ::1 at 2024-04-28 00:07:32 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 9.0ms | Allocations: 1546)
Completed 200 OK in 649ms (Views: 13.4ms | ActiveRecord: 0.0ms | Allocations: 287011)


Started POST "/graphql" for ::1 at 2024-04-28 00:07:33 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
uninitialized constant Types::BlogInputType
Did you mean?  Types::BlogType
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:9:in `<class:BlogCreate>'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:4:in `<module:Mutations>'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 69ms (Views: 7.4ms | ActiveRecord: 0.0ms | Allocations: 4839)


Started GET "/graphiql" for ::1 at 2024-04-28 00:07:50 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (2.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 9.7ms | Allocations: 1530)
Completed 200 OK in 510ms (Views: 14.0ms | ActiveRecord: 0.0ms | Allocations: 286993)


Started POST "/graphql" for ::1 at 2024-04-28 00:07:51 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Invalid input type for BlogCreate.blogInput: Blog. Must be scalar, enum, or input object, not OBJECT.
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:397:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:395:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:178:in `type='
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:195:in `type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:211:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:199:in `block (2 levels) in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:55:in `block in add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:17:in `initialize'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `new'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:446:in `mutation'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 30ms (Views: 3.0ms | ActiveRecord: 0.0ms | Allocations: 3956)


Started GET "/graphiql" for ::1 at 2024-04-28 00:10:05 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.2ms | Allocations: 566)
Completed 200 OK in 5ms (Views: 4.8ms | ActiveRecord: 0.0ms | Allocations: 1291)


Started POST "/graphql" for ::1 at 2024-04-28 00:10:06 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 500 Internal Server Error in 9ms (ActiveRecord: 0.0ms | Allocations: 1537)


  
SyntaxError (/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
      blog = ::Blog.new(title:, description:, user_id:)
                              ^
):
  
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
app/graphql/types/mutation_type.rb:4:in `<module:Types>'
app/graphql/types/mutation_type.rb:3:in `<main>'
app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
app/graphql/graphql_app_schema.rb:3:in `<main>'
app/controllers/graphql_controller.rb:17:in `execute'
Started GET "/graphiql" for ::1 at 2024-04-28 00:11:10 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.2ms | Allocations: 555)
Completed 200 OK in 7ms (Views: 5.5ms | ActiveRecord: 0.0ms | Allocations: 1273)


Started POST "/graphql" for ::1 at 2024-04-28 00:11:11 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 500 Internal Server Error in 15ms (ActiveRecord: 0.0ms | Allocations: 1524)


  
SyntaxError (/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
      blog = Blog.new(title:, description:, user_id:)
                            ^
):
  
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
app/graphql/types/mutation_type.rb:4:in `<module:Types>'
app/graphql/types/mutation_type.rb:3:in `<main>'
app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
app/graphql/graphql_app_schema.rb:3:in `<main>'
app/controllers/graphql_controller.rb:17:in `execute'
Started GET "/graphiql" for ::1 at 2024-04-28 00:11:57 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.8ms | Allocations: 565)
Completed 200 OK in 4ms (Views: 3.6ms | ActiveRecord: 0.0ms | Allocations: 1284)


Started POST "/graphql" for ::1 at 2024-04-28 00:11:57 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 500 Internal Server Error in 11ms (ActiveRecord: 0.0ms | Allocations: 1533)


  
SyntaxError (/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:14: syntax error, unexpected label
... = Blog.new(title: description: user_id:)
...                   ^~~~~~~~~~~~
):
  
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected label
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected label
app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
app/graphql/types/mutation_type.rb:4:in `<module:Types>'
app/graphql/types/mutation_type.rb:3:in `<main>'
app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
app/graphql/graphql_app_schema.rb:3:in `<main>'
app/controllers/graphql_controller.rb:17:in `execute'
Started GET "/graphiql" for ::1 at 2024-04-28 00:12:22 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.5ms | Allocations: 553)
Completed 200 OK in 6ms (Views: 5.4ms | ActiveRecord: 0.0ms | Allocations: 1271)


Started POST "/graphql" for ::1 at 2024-04-28 00:12:22 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 500 Internal Server Error in 19ms (ActiveRecord: 0.0ms | Allocations: 1523)


  
SyntaxError (/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
      blog = Blog.new(title:, description:, user_id:)
                            ^
):
  
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected ','
app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
app/graphql/types/mutation_type.rb:4:in `<module:Types>'
app/graphql/types/mutation_type.rb:3:in `<main>'
app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
app/graphql/graphql_app_schema.rb:3:in `<main>'
app/controllers/graphql_controller.rb:17:in `execute'
Started GET "/graphiql" for ::1 at 2024-04-28 00:12:32 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.4ms | Allocations: 571)
Completed 200 OK in 3ms (Views: 3.0ms | ActiveRecord: 0.0ms | Allocations: 1291)


Started POST "/graphql" for ::1 at 2024-04-28 00:12:33 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 500 Internal Server Error in 18ms (ActiveRecord: 0.0ms | Allocations: 1533)


  
SyntaxError (/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:14: syntax error, unexpected label
... = Blog.new(title: description:, user_id:)
...                   ^~~~~~~~~~~~
):
  
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected label
app/graphql/mutations/blog_create.rb:14: syntax error, unexpected label
app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
app/graphql/types/mutation_type.rb:4:in `<module:Types>'
app/graphql/types/mutation_type.rb:3:in `<main>'
app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
app/graphql/graphql_app_schema.rb:3:in `<main>'
app/controllers/graphql_controller.rb:17:in `execute'
Started GET "/graphiql" for ::1 at 2024-04-28 00:16:20 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.2ms | Allocations: 552)
Completed 200 OK in 6ms (Views: 5.3ms | ActiveRecord: 0.0ms | Allocations: 1274)


Started POST "/graphql" for ::1 at 2024-04-28 00:16:20 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 194ms (Views: 37.5ms | ActiveRecord: 0.0ms | Allocations: 24523)


Started POST "/graphql" for ::1 at 2024-04-28 00:17:39 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 16}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 16}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mUser Load (1.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 16], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[31mROLLBACK[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
Completed 200 OK in 122ms (Views: 0.6ms | ActiveRecord: 22.0ms | Allocations: 28942)


Started POST "/graphql" for ::1 at 2024-04-28 00:17:52 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mBlog Create (18.5ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "test"], ["description", "testing"], ["user_id", 3], ["created_at", "2024-04-27 18:47:52.525551"], ["updated_at", "2024-04-27 18:47:52.525551"]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mTRANSACTION (36.9ms)[0m  [1m[35mCOMMIT[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
Completed 200 OK in 118ms (Views: 0.3ms | ActiveRecord: 56.1ms | Allocations: 17492)


Started GET "/graphiql" for ::1 at 2024-04-28 00:19:59 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.7ms | Allocations: 567)
Completed 200 OK in 5ms (Views: 4.5ms | ActiveRecord: 0.0ms | Allocations: 1287)


Started POST "/graphql" for ::1 at 2024-04-28 00:19:59 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 119ms (Views: 9.3ms | ActiveRecord: 0.0ms | Allocations: 23025)


Started POST "/graphql" for ::1 at 2024-04-28 00:20:11 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
Completed 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 0.0ms | Allocations: 805)


Started GET "/graphiql" for ::1 at 2024-04-28 00:27:15 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.1ms | Allocations: 565)
Completed 200 OK in 6ms (Views: 4.8ms | ActiveRecord: 0.0ms | Allocations: 1285)


Started POST "/graphql" for ::1 at 2024-04-28 00:27:16 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 173ms (Views: 26.8ms | ActiveRecord: 0.0ms | Allocations: 23046)


Started POST "/graphql" for ::1 at 2024-04-28 00:27:23 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mBlog Exists? (1.1ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test"], ["description", "testing"], ["LIMIT", 1]]
  ↳ (rdbg)//home/user/Desktop/graphql_app/app/models/blog.rb:1:in `unique_blog_for_user'
  [1m[36mCACHE Blog Exists? (0.1ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test"], ["description", "testing"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:10:in `unique_blog_for_user'
  [1m[36mBlog Create (1.4ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "test"], ["description", "testing"], ["user_id", 3], ["created_at", "2024-04-27 18:57:33.783849"], ["updated_at", "2024-04-27 18:57:33.783849"]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mTRANSACTION (67.0ms)[0m  [1m[35mCOMMIT[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
Completed 200 OK in 10747ms (Views: 0.3ms | ActiveRecord: 102.7ms | Allocations: 158210)


Started POST "/graphql" for ::1 at 2024-04-28 00:28:16 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
You need to supply at least one validation
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.8.1/lib/active_model/validations/validates.rb:111:in `validates'
/home/user/Desktop/graphql_app/app/models/blog.rb:5:in `<class:Blog>'
/home/user/Desktop/graphql_app/app/models/blog.rb:1:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_create.rb:14:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:119:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:119:in `call_resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:106:in `block (3 levels) in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:94:in `block (2 levels) in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:85:in `block in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:73:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/relay_classic_mutation.rb:45:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `block (2 levels) in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:817:in `with_extensions'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:654:in `block in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:652:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:367:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/tracing/trace.rb:52:in `execute_field'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:366:in `block in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:718:in `call_method_on_directives'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:354:in `evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:331:in `block in evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:839:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:279:in `evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:273:in `block in evaluate_selection'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/arguments_cache.rb:51:in `block in dataload_for'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/member/has_arguments.rb:300:in `block (3 levels) in coerce_arguments'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:252:in `block in spawn_job_fiber'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:233:in `block in spawn_fiber'
Completed 500 Internal Server Error in 37ms (Views: 0.9ms | ActiveRecord: 0.0ms | Allocations: 7389)


Started GET "/graphiql" for ::1 at 2024-04-28 00:29:10 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.6ms | Allocations: 567)
Completed 200 OK in 5ms (Views: 4.8ms | ActiveRecord: 0.0ms | Allocations: 1286)


Started POST "/graphql" for ::1 at 2024-04-28 00:29:10 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 128ms (Views: 11.5ms | ActiveRecord: 0.0ms | Allocations: 23130)


Started POST "/graphql" for ::1 at 2024-04-28 00:29:13 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mBlog Exists? (0.7ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test"], ["description", "testing"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:10:in `unique_blog_for_user'
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[31mROLLBACK[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
Completed 200 OK in 2870ms (Views: 0.9ms | ActiveRecord: 25.3ms | Allocations: 96972)


Started GET "/graphiql" for ::1 at 2024-04-28 00:32:19 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.5ms | Allocations: 565)
Completed 200 OK in 4ms (Views: 3.6ms | ActiveRecord: 0.0ms | Allocations: 1284)


Started POST "/graphql" for ::1 at 2024-04-28 00:32:19 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 93ms (Views: 8.5ms | ActiveRecord: 0.0ms | Allocations: 23029)


Started POST "/graphql" for ::1 at 2024-04-28 00:32:23 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mUser Load (0.8ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mBlog Exists? (0.7ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test"], ["description", "testing"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:10:in `unique_blog_for_user'
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[31mROLLBACK[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
Completed 200 OK in 3256ms (Views: 0.8ms | ActiveRecord: 19.9ms | Allocations: 95753)


Started GET "/graphiql" for ::1 at 2024-04-28 00:32:35 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.3ms | Allocations: 555)
Completed 200 OK in 8ms (Views: 6.7ms | ActiveRecord: 0.0ms | Allocations: 1280)


Started POST "/graphql" for ::1 at 2024-04-28 00:32:36 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 148ms (Views: 20.8ms | ActiveRecord: 0.0ms | Allocations: 23122)


Started POST "/graphql" for ::1 at 2024-04-28 00:32:37 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mBlog Exists? (0.6ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test"], ["description", "testing"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:10:in `unique_blog_for_user'
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[31mROLLBACK[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
Completed 200 OK in 1595ms (Views: 0.5ms | ActiveRecord: 16.9ms | Allocations: 95395)


Started POST "/graphql" for ::1 at 2024-04-28 00:33:46 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test1\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test1\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mBlog Exists? (0.6ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test1"], ["description", "testing"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:10:in `unique_blog_for_user'
  [1m[36mBlog Create (0.7ms)[0m  [1m[32mINSERT INTO "blogs" ("title", "description", "user_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["title", "test1"], ["description", "testing"], ["user_id", 3], ["created_at", "2024-04-27 19:03:49.727452"], ["updated_at", "2024-04-27 19:03:49.727452"]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mTRANSACTION (61.4ms)[0m  [1m[35mCOMMIT[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
Completed 200 OK in 3622ms (Views: 0.5ms | ActiveRecord: 76.9ms | Allocations: 100432)


Started POST "/graphql" for ::1 at 2024-04-28 00:34:24 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test1\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n      description\n    }\n  }\n}\n", "operationName"=>"createBlog", "graphql"=>{"query"=>"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\n#\n#        Run Query:  Ctrl-Enter (or press the play button)\n#\n#    Auto Complete:  Ctrl-Space (or just start typing)\n#\n# {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n# query getUser($id: ID!){\n#   user(id: $id){\n#     id\n#     email\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nmutation createBlog{\n  blogCreate(input: {title: \"test1\", description: \"testing\", userId: 3}){\n    blog{\n      id\n      title\n      description\n    }\n  }\n}\n", "operationName"=>"createBlog"}}
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
  [1m[36mBlog Exists? (0.6ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test1"], ["description", "testing"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:9:in `unique_blog_for_user'
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[31mROLLBACK[0m
  ↳ app/graphql/mutations/blog_create.rb:15:in `resolve'
Completed 200 OK in 80ms (Views: 0.4ms | ActiveRecord: 17.4ms | Allocations: 15899)


  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" ORDER BY "blogs"."id" DESC LIMIT $1[0m  [["LIMIT", 1]]
Started GET "/graphiql" for ::1 at 2024-04-28 00:40:58 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 10.2ms | Allocations: 1552)
Completed 200 OK in 504ms (Views: 15.5ms | ActiveRecord: 0.0ms | Allocations: 287015)


Started POST "/graphql" for ::1 at 2024-04-28 00:40:59 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 115ms (Views: 19.5ms | ActiveRecord: 0.0ms | Allocations: 27402)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:12 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 71ms (Views: 9.8ms | ActiveRecord: 0.0ms | Allocations: 19190)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:14 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 71ms (Views: 10.6ms | ActiveRecord: 0.0ms | Allocations: 19191)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:14 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 82ms (Views: 12.5ms | ActiveRecord: 0.0ms | Allocations: 19190)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:14 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 108ms (Views: 18.7ms | ActiveRecord: 0.0ms | Allocations: 19189)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:15 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 127ms (Views: 45.0ms | ActiveRecord: 0.0ms | Allocations: 19190)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:15 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 76ms (Views: 10.5ms | ActiveRecord: 0.0ms | Allocations: 19191)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:16 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 69ms (Views: 11.2ms | ActiveRecord: 0.0ms | Allocations: 19190)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:16 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 77ms (Views: 11.3ms | ActiveRecord: 0.0ms | Allocations: 19189)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:16 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 67ms (Views: 10.2ms | ActiveRecord: 0.0ms | Allocations: 19189)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:17 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 93ms (Views: 12.3ms | ActiveRecord: 0.0ms | Allocations: 19189)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:17 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 74ms (Views: 10.4ms | ActiveRecord: 0.0ms | Allocations: 19189)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:17 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 65ms (Views: 12.2ms | ActiveRecord: 0.0ms | Allocations: 19189)


Started GET "/graphiql" for ::1 at 2024-04-28 00:41:57 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.7ms | Allocations: 560)
Completed 200 OK in 8ms (Views: 6.4ms | ActiveRecord: 0.0ms | Allocations: 1285)


Started POST "/graphql" for ::1 at 2024-04-28 00:41:57 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Invalid input type for BlogUpdate.blogInput: Blog. Must be scalar, enum, or input object, not OBJECT.
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:397:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:395:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:178:in `type='
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:195:in `type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:211:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:199:in `block (2 levels) in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:55:in `block in add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:17:in `initialize'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `new'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:446:in `mutation'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 21ms (Views: 3.5ms | ActiveRecord: 0.0ms | Allocations: 4651)


Started GET "/graphiql" for ::1 at 2024-04-28 00:42:11 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.5ms | Allocations: 568)
Completed 200 OK in 4ms (Views: 3.4ms | ActiveRecord: 0.0ms | Allocations: 1288)


Started POST "/graphql" for ::1 at 2024-04-28 00:42:11 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
uninitialized constant Types::BlogInputType
Did you mean?  Types::BlogType
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_update.rb:10:in `<class:BlogUpdate>'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_update.rb:4:in `<module:Mutations>'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_update.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/home/user/Desktop/graphql_app/app/graphql/types/mutation_type.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 40ms (Views: 3.3ms | ActiveRecord: 0.0ms | Allocations: 4757)


Started GET "/graphiql" for ::1 at 2024-04-28 00:42:25 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.1ms | Allocations: 566)
Completed 200 OK in 6ms (Views: 5.1ms | ActiveRecord: 0.0ms | Allocations: 1287)


Started POST "/graphql" for ::1 at 2024-04-28 00:42:26 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Invalid input type for BlogUpdate.blogInput: Blog. Must be scalar, enum, or input object, not OBJECT.
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:397:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:395:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:178:in `type='
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:195:in `type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:211:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:199:in `block (2 levels) in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:55:in `block in add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:17:in `initialize'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `new'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:446:in `mutation'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 25ms (Views: 2.5ms | ActiveRecord: 0.0ms | Allocations: 4608)


Started GET "/graphiql" for ::1 at 2024-04-28 00:44:02 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.2ms | Allocations: 567)
Completed 200 OK in 5ms (Views: 4.2ms | ActiveRecord: 0.0ms | Allocations: 1285)


Started POST "/graphql" for ::1 at 2024-04-28 00:44:03 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Invalid input type for BlogUpdate.blogInput: Blog. Must be scalar, enum, or input object, not OBJECT.
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:397:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:395:in `validate_input_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:178:in `type='
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/argument.rb:195:in `type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:211:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:209:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:199:in `block (2 levels) in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:194:in `block in add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:187:in `add_type'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:55:in `block in add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:53:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/addition.rb:17:in `initialize'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `new'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:1419:in `add_type_and_traverse'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema.rb:446:in `mutation'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
/home/user/Desktop/graphql_app/app/graphql/graphql_app_schema.rb:3:in `<main>'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/bootsnap-1.18.3/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/zeitwerk-2.6.13/lib/zeitwerk/kernel.rb:26:in `require'
/home/user/Desktop/graphql_app/app/controllers/graphql_controller.rb:17:in `execute'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:215:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rendering.rb:165:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:234:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/callbacks.rb:233:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/rescue.rb:23:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:67:in `block in process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `block in instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/notifications.rb:206:in `instrument'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/instrumentation.rb:66:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/railties/controller_runtime.rb:27:in `process_action'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/abstract_controller/base.rb:151:in `process'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:188:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_controller/metal.rb:251:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:50:in `block in serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `each'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/journey/router.rb:32:in `serve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/routing/route_set.rb:852:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/tempfile_reaper.rb:15:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/etag.rb:27:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/conditional_get.rb:40:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/head.rb:12:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/http/content_security_policy.rb:36:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:266:in `context'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/session/abstract/id.rb:260:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/cookies.rb:704:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/migration.rb:638:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:27:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/callbacks.rb:99:in `run_callbacks'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/callbacks.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/actionable_exceptions.rb:17:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/show_exceptions.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:40:in `call_app'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `block in tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:37:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/tagged_logging.rb:99:in `tagged'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/rack/logger.rb:25:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/remote_ip.rb:93:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/request_id.rb:26:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/method_override.rb:24:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/runtime.rb:22:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activesupport-7.0.8.1/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/executor.rb:14:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/static.rb:23:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/rack-2.2.9/lib/rack/sendfile.rb:110:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/actionpack-7.0.8.1/lib/action_dispatch/middleware/host_authorization.rb:138:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/railties-7.0.8.1/lib/rails/engine.rb:530:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/configuration.rb:252:in `call'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:77:in `block in handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:340:in `with_force_shutdown'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/request.rb:76:in `handle_request'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/server.rb:443:in `process_client'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/puma-5.6.8/lib/puma/thread_pool.rb:147:in `block in spawn_thread'
Completed 500 Internal Server Error in 72ms (Views: 1.4ms | ActiveRecord: 0.0ms | Allocations: 4563)


Started GET "/graphiql" for ::1 at 2024-04-28 00:46:03 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.6ms | Allocations: 559)
Completed 200 OK in 4ms (Views: 3.5ms | ActiveRecord: 0.0ms | Allocations: 1277)


Started POST "/graphql" for ::1 at 2024-04-28 00:46:03 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 500 Internal Server Error in 15ms (ActiveRecord: 0.0ms | Allocations: 1565)


  
SyntaxError (/home/user/Desktop/graphql_app/app/graphql/mutations/blog_update.rb:15: syntax error, unexpected ','
...hash unless blog.update(title:, description:)
...                              ^
):
  
app/graphql/mutations/blog_update.rb:15: syntax error, unexpected ','
app/graphql/mutations/blog_update.rb:15: syntax error, unexpected ','
app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
app/graphql/types/mutation_type.rb:4:in `<module:Types>'
app/graphql/types/mutation_type.rb:3:in `<main>'
app/graphql/graphql_app_schema.rb:4:in `<class:GraphqlAppSchema>'
app/graphql/graphql_app_schema.rb:3:in `<main>'
app/controllers/graphql_controller.rb:17:in `execute'
Started GET "/graphiql" for ::1 at 2024-04-28 00:46:19 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.6ms | Allocations: 571)
Completed 200 OK in 4ms (Views: 3.2ms | ActiveRecord: 0.0ms | Allocations: 1289)


Started POST "/graphql" for ::1 at 2024-04-28 00:46:19 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 163ms (Views: 18.9ms | ActiveRecord: 0.0ms | Allocations: 25246)


Started POST "/graphql" for ::1 at 2024-04-28 00:46:49 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation updateBlog {\n  blogUpdate(input: {id: 41, title: \"How is it\", description: \"Hello world\"}) {\n    blog {\n      id\n      title\n      description\n    }\n  }\n}", "operationName"=>"updateBlog", "graphql"=>{"query"=>"mutation updateBlog {\n  blogUpdate(input: {id: 41, title: \"How is it\", description: \"Hello world\"}) {\n    blog {\n      id\n      title\n      description\n    }\n  }\n}", "operationName"=>"updateBlog"}}
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 41], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_update.rb:14:in `resolve'
Couldn't find Blog with 'id'=41
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/core.rb:284:in `find'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_update.rb:14:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:119:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:119:in `call_resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:106:in `block (3 levels) in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:94:in `block (2 levels) in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:85:in `block in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:73:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/relay_classic_mutation.rb:45:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `block (2 levels) in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:817:in `with_extensions'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:654:in `block in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:652:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:367:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/tracing/trace.rb:52:in `execute_field'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:366:in `block in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:718:in `call_method_on_directives'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:354:in `evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:331:in `block in evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:839:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:279:in `evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:273:in `block in evaluate_selection'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/arguments_cache.rb:51:in `block in dataload_for'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/member/has_arguments.rb:300:in `block (3 levels) in coerce_arguments'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:252:in `block in spawn_job_fiber'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:233:in `block in spawn_fiber'
Completed 500 Internal Server Error in 121ms (Views: 0.9ms | ActiveRecord: 9.4ms | Allocations: 7273)


Started POST "/graphql" for ::1 at 2024-04-28 00:47:04 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation updateBlog {\n  blogUpdate(input: {id: 22, title: \"test1\", description: \"Hello world\"}) {\n    blog {\n      id\n      title\n      description\n    }\n  }\n}", "operationName"=>"updateBlog", "graphql"=>{"query"=>"mutation updateBlog {\n  blogUpdate(input: {id: 22, title: \"test1\", description: \"Hello world\"}) {\n    blog {\n      id\n      title\n      description\n    }\n  }\n}", "operationName"=>"updateBlog"}}
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 22], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_update.rb:14:in `resolve'
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
  [1m[36mUser Load (0.9ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
  [1m[36mBlog Exists? (2.6ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test1"], ["description", "Hello world"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:9:in `unique_blog_for_user'
  [1m[36mBlog Update (1.9ms)[0m  [1m[33mUPDATE "blogs" SET "title" = $1, "description" = $2, "updated_at" = $3 WHERE "blogs"."id" = $4[0m  [["title", "test1"], ["description", "Hello world"], ["updated_at", "2024-04-27 19:17:04.548253"], ["id", 22]]
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
  [1m[36mTRANSACTION (27.7ms)[0m  [1m[35mCOMMIT[0m
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
Completed 200 OK in 173ms (Views: 0.3ms | ActiveRecord: 39.8ms | Allocations: 40809)


Started POST "/graphql" for ::1 at 2024-04-28 00:47:31 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation updateBlog {\n  blogUpdate(input: {id: 23, title: \"test1\", description: \"Hello world\"}) {\n    blog {\n      id\n      title\n      description\n    }\n  }\n}", "operationName"=>"updateBlog", "graphql"=>{"query"=>"mutation updateBlog {\n  blogUpdate(input: {id: 23, title: \"test1\", description: \"Hello world\"}) {\n    blog {\n      id\n      title\n      description\n    }\n  }\n}", "operationName"=>"updateBlog"}}
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 23], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_update.rb:14:in `resolve'
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
  [1m[36mUser Load (1.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
  [1m[36mBlog Exists? (1.3ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test1"], ["description", "Hello world"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:9:in `unique_blog_for_user'
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[31mROLLBACK[0m
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
Completed 200 OK in 24ms (Views: 0.3ms | ActiveRecord: 3.3ms | Allocations: 4003)


Started POST "/graphql" for ::1 at 2024-04-28 00:47:53 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation updateBlog {\n  blogUpdate(input: {id: 23, title: \"test\", description: \"Hello world\"}) {\n    blog {\n      id\n      title\n      description\n    }\n  }\n}", "operationName"=>"updateBlog", "graphql"=>{"query"=>"mutation updateBlog {\n  blogUpdate(input: {id: 23, title: \"test\", description: \"Hello world\"}) {\n    blog {\n      id\n      title\n      description\n    }\n  }\n}", "operationName"=>"updateBlog"}}
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 23], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_update.rb:14:in `resolve'
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
  [1m[36mBlog Exists? (1.2ms)[0m  [1m[34mSELECT 1 AS one FROM "blogs" WHERE "blogs"."user_id" = $1 AND "blogs"."title" = $2 AND "blogs"."description" = $3 LIMIT $4[0m  [["user_id", 3], ["title", "test"], ["description", "Hello world"], ["LIMIT", 1]]
  ↳ app/models/blog.rb:9:in `unique_blog_for_user'
  [1m[36mBlog Update (0.5ms)[0m  [1m[33mUPDATE "blogs" SET "title" = $1, "description" = $2, "updated_at" = $3 WHERE "blogs"."id" = $4[0m  [["title", "test"], ["description", "Hello world"], ["updated_at", "2024-04-27 19:17:53.599451"], ["id", 23]]
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
  [1m[36mTRANSACTION (89.6ms)[0m  [1m[35mCOMMIT[0m
  ↳ app/graphql/mutations/blog_update.rb:15:in `resolve'
Completed 200 OK in 117ms (Views: 0.2ms | ActiveRecord: 92.6ms | Allocations: 4476)


  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" ORDER BY "blogs"."id" DESC LIMIT $1[0m  [["LIMIT", 1]]
Started GET "/graphiql" for ::1 at 2024-04-28 16:38:14 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (19.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 46.0ms | Allocations: 1440)
Completed 200 OK in 1189ms (Views: 152.4ms | ActiveRecord: 0.0ms | Allocations: 286907)


Started POST "/graphql" for ::1 at 2024-04-28 16:38:18 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 473ms (Views: 9.7ms | ActiveRecord: 0.0ms | Allocations: 27116)


Started GET "/favicon.ico" for ::1 at 2024-04-28 16:38:20 +0530
  
ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  
Started POST "/graphql" for ::1 at 2024-04-28 16:38:50 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 116ms (Views: 28.6ms | ActiveRecord: 0.0ms | Allocations: 19033)


Started GET "/graphiql" for ::1 at 2024-04-28 16:39:33 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.5ms | Allocations: 520)
Completed 200 OK in 3ms (Views: 2.4ms | ActiveRecord: 0.0ms | Allocations: 830)


Started POST "/graphql" for ::1 at 2024-04-28 16:39:34 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 67ms (Views: 15.1ms | ActiveRecord: 0.0ms | Allocations: 19033)


Started GET "/graphiql" for ::1 at 2024-04-28 16:48:15 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 34.4ms | Allocations: 1532)
Completed 200 OK in 923ms (Views: 75.3ms | ActiveRecord: 0.0ms | Allocations: 286996)


Started POST "/graphql" for ::1 at 2024-04-28 16:48:17 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 201ms (Views: 11.5ms | ActiveRecord: 0.0ms | Allocations: 29048)


Started GET "/graphiql" for ::1 at 2024-04-28 17:00:15 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1.5ms | Allocations: 574)
Completed 200 OK in 4ms (Views: 3.6ms | ActiveRecord: 0.0ms | Allocations: 1299)


Started POST "/graphql" for ::1 at 2024-04-28 17:00:15 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 166ms (Views: 28.2ms | ActiveRecord: 0.0ms | Allocations: 27068)


Started POST "/graphql" for ::1 at 2024-04-28 17:00:23 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 42}){\n    message\n  }\n}", "operationName"=>"deleteBlog", "graphql"=>{"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 42}){\n    message\n  }\n}", "operationName"=>"deleteBlog"}}
Completed 200 OK in 3ms (Views: 0.6ms | ActiveRecord: 0.0ms | Allocations: 701)


Started GET "/graphiql" for ::1 at 2024-04-28 17:01:22 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 2.2ms | Allocations: 563)
Completed 200 OK in 6ms (Views: 5.1ms | ActiveRecord: 0.0ms | Allocations: 1281)


Started POST "/graphql" for ::1 at 2024-04-28 17:01:23 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 116ms (Views: 11.0ms | ActiveRecord: 0.0ms | Allocations: 27248)


Started POST "/graphql" for ::1 at 2024-04-28 17:01:42 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 42}){\n    blog {\n      id\n      title\n      description\n    }\n    message\n  }\n}", "operationName"=>"deleteBlog", "graphql"=>{"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 42}){\n    blog {\n      id\n      title\n      description\n    }\n    message\n  }\n}", "operationName"=>"deleteBlog"}}
  [1m[36mBlog Load (56.9ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 42], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_delete.rb:13:in `resolve'
Couldn't find Blog with 'id'=42
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/core.rb:284:in `find'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_delete.rb:13:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:119:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:119:in `call_resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:106:in `block (3 levels) in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:94:in `block (2 levels) in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:85:in `block in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:73:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/relay_classic_mutation.rb:45:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `block (2 levels) in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:817:in `with_extensions'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:654:in `block in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:652:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:367:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/tracing/trace.rb:52:in `execute_field'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:366:in `block in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:718:in `call_method_on_directives'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:354:in `evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:331:in `block in evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:839:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:279:in `evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:273:in `block in evaluate_selection'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/arguments_cache.rb:51:in `block in dataload_for'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/member/has_arguments.rb:300:in `block (3 levels) in coerce_arguments'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:252:in `block in spawn_job_fiber'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:233:in `block in spawn_fiber'
Completed 500 Internal Server Error in 402ms (Views: 1.1ms | ActiveRecord: 222.1ms | Allocations: 8978)


Started POST "/graphql" for ::1 at 2024-04-28 17:01:49 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 23}){\n    blog {\n      id\n      title\n      description\n    }\n    message\n  }\n}", "operationName"=>"deleteBlog", "graphql"=>{"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 23}){\n    blog {\n      id\n      title\n      description\n    }\n    message\n  }\n}", "operationName"=>"deleteBlog"}}
  [1m[36mBlog Load (88.2ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 23], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_delete.rb:13:in `resolve'
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_delete.rb:14:in `resolve'
  [1m[36mBlog Destroy (0.5ms)[0m  [1m[31mDELETE FROM "blogs" WHERE "blogs"."id" = $1[0m  [["id", 23]]
  ↳ app/graphql/mutations/blog_delete.rb:14:in `resolve'
  [1m[36mTRANSACTION (20.2ms)[0m  [1m[35mCOMMIT[0m
  ↳ app/graphql/mutations/blog_delete.rb:14:in `resolve'
Completed 200 OK in 182ms (Views: 0.4ms | ActiveRecord: 109.2ms | Allocations: 17612)


  [1m[36mBlog Load (0.8ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 23], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2024-04-28 17:02:37 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 23}){\n    message\n  }\n}", "operationName"=>"deleteBlog", "graphql"=>{"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 23}){\n    message\n  }\n}", "operationName"=>"deleteBlog"}}
  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 23], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_delete.rb:13:in `resolve'
Couldn't find Blog with 'id'=23
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/activerecord-7.0.8.1/lib/active_record/core.rb:284:in `find'
/home/user/Desktop/graphql_app/app/graphql/mutations/blog_delete.rb:13:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:119:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:119:in `call_resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:106:in `block (3 levels) in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:94:in `block (2 levels) in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:85:in `block in resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/resolver.rb:73:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/relay_classic_mutation.rb:45:in `resolve_with_support'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `public_send'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:683:in `block (2 levels) in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:817:in `with_extensions'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:654:in `block in resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:779:in `minimal_after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/query.rb:372:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/field.rb:652:in `resolve'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:367:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/tracing/trace.rb:52:in `execute_field'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:366:in `block in evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:718:in `call_method_on_directives'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:354:in `evaluate_selection_with_resolved_keyword_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:331:in `block in evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:839:in `after_lazy'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:279:in `evaluate_selection_with_args'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/runtime.rb:273:in `block in evaluate_selection'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/execution/interpreter/arguments_cache.rb:51:in `block in dataload_for'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/schema/member/has_arguments.rb:300:in `block (3 levels) in coerce_arguments'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:252:in `block in spawn_job_fiber'
/home/user/Desktop/graphql_app/vendor/bundle/ruby/3.0.0/gems/graphql-2.3.2/lib/graphql/dataloader.rb:233:in `block in spawn_fiber'
Completed 500 Internal Server Error in 51ms (Views: 0.9ms | ActiveRecord: 9.1ms | Allocations: 10263)


Started POST "/graphql" for ::1 at 2024-04-28 17:02:42 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 22}){\n    message\n  }\n}", "operationName"=>"deleteBlog", "graphql"=>{"query"=>"mutation deleteBlog{\n  blogDelete(input: {id: 22}){\n    message\n  }\n}", "operationName"=>"deleteBlog"}}
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 22], ["LIMIT", 1]]
  ↳ app/graphql/mutations/blog_delete.rb:13:in `resolve'
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  ↳ app/graphql/mutations/blog_delete.rb:14:in `resolve'
  [1m[36mBlog Destroy (0.6ms)[0m  [1m[31mDELETE FROM "blogs" WHERE "blogs"."id" = $1[0m  [["id", 22]]
  ↳ app/graphql/mutations/blog_delete.rb:14:in `resolve'
  [1m[36mTRANSACTION (78.9ms)[0m  [1m[35mCOMMIT[0m
  ↳ app/graphql/mutations/blog_delete.rb:14:in `resolve'
Completed 200 OK in 96ms (Views: 0.2ms | ActiveRecord: 80.3ms | Allocations: 3767)


  [1m[36mBlog Load (0.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 22], ["LIMIT", 1]]
Started GET "/swagger" for ::1 at 2024-04-28 20:06:10 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  
ActionController::RoutingError (No route matches [GET] "/swagger"):
  
Started GET "/graphiql" for ::1 at 2024-04-28 20:06:18 +0530
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 4.2ms | Allocations: 1134)
Completed 200 OK in 131ms (Views: 7.3ms | ActiveRecord: 0.0ms | Allocations: 4934)


Started POST "/graphql" for ::1 at 2024-04-28 20:06:19 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 955ms (Views: 11.0ms | ActiveRecord: 0.0ms | Allocations: 28955)


Started POST "/graphql" for ::1 at 2024-04-28 20:07:01 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n  blog{\n    id\n  }\n\n  ", "graphql"=>{"query"=>"\n  blog{\n    id\n  }\n\n  "}}
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.0ms | Allocations: 342)


Started POST "/graphql" for ::1 at 2024-04-28 20:07:46 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>" {\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}", "graphql"=>{"query"=>" {\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}"}}
  [1m[36mBlog Load (0.8ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (65.9ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (1.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 523ms (Views: 1.1ms | ActiveRecord: 98.8ms | Allocations: 57649)


Started GET "/graphiql" for ::1 at 2024-04-30 21:35:40 +0530
  [1m[36mActiveRecord::SchemaMigration Pluck (53.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered vendor/bundle/ruby/3.0.0/gems/graphiql-rails-1.10.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 64.6ms | Allocations: 1440)
Completed 200 OK in 1548ms (Views: 149.7ms | ActiveRecord: 0.0ms | Allocations: 286665)


Started POST "/graphql" for ::1 at 2024-04-30 21:35:55 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Interface `Node` hidden because it has no visible implementors
Completed 200 OK in 1091ms (Views: 9.5ms | ActiveRecord: 0.0ms | Allocations: 29216)


Started GET "/favicon.ico" for ::1 at 2024-04-30 21:35:59 +0530
  
ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  
Started POST "/graphql" for ::1 at 2024-04-30 21:37:09 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>" {\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}", "graphql"=>{"query"=>" {\n  blogs {\n    id\n    title\n    userId\n    userName\n    createdAt\n  }\n}"}}
  [1m[36mBlog Load (123.0ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs"[0m
  [1m[36mUser Load (44.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (1.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 3], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 909ms (Views: 1.1ms | ActiveRecord: 263.8ms | Allocations: 52396)


Started POST "/graphql" for ::1 at 2024-04-30 21:37:43 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"#  {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}", "graphql"=>{"query"=>"#  {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n{\n  users {\n    id\n    firstName\n    email\n    createdAt\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}"}}
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
  [1m[36mBlog Load (0.7ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 1]]
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 2]]
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 3]]
  [1m[36mBlog Load (1.4ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 4]]
  [1m[36mBlog Load (0.6ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 5]]
Completed 200 OK in 318ms (Views: 2.5ms | ActiveRecord: 4.2ms | Allocations: 8635)


Started POST "/graphql" for ::1 at 2024-04-30 21:38:26 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"#  {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "operationName"=>"getBlog", "graphql"=>{"query"=>"#  {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "operationName"=>"getBlog"}}
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 0.0ms | Allocations: 701)


Started POST "/graphql" for ::1 at 2024-04-30 21:38:55 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"#  {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>2}, "operationName"=>"getBlog", "graphql"=>{"query"=>"#  {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\nquery getBlog($id: ID!){\n  blog(id: $id){\n    title\n    description\n    userId\n    userName\n    \n  }\n}\n", "variables"=>{"id"=>2}, "operationName"=>"getBlog"}}
  [1m[36mBlog Load (0.5ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."id" = $1 LIMIT $2[0m  [["id", 2], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:41:in `blog'
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/blog_type.rb:14:in `user_name'
Completed 200 OK in 11ms (Views: 0.3ms | ActiveRecord: 1.0ms | Allocations: 1772)


Started POST "/graphql" for ::1 at 2024-04-30 21:39:28 +0530
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"#  {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}", "variables"=>{"id"=>5}, "operationName"=>"getUser", "graphql"=>{"query"=>"#  {\n#   blogs {\n#     id\n#     title\n#     userId\n#     userName\n#     createdAt\n#   }\n# }\n\n# {\n#   users {\n#     id\n#     firstName\n#     email\n#     createdAt\n#     blogs {\n#       id\n#       title\n#       description\n#     }\n#   }\n# }\n\n\n# query getBlog($id: ID!){\n#   blog(id: $id){\n#     title\n#     description\n#     userId\n#     userName\n    \n#   }\n# }\n\n\nquery getUser($id: ID!){\n  user(id: $id){\n    id\n    email\n    blogs {\n      id\n      title\n      description\n    }\n  }\n}", "variables"=>{"id"=>5}, "operationName"=>"getUser"}}
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:54:in `user'
  [1m[36mBlog Load (0.9ms)[0m  [1m[34mSELECT "blogs".* FROM "blogs" WHERE "blogs"."user_id" = $1[0m  [["user_id", 5]]
Completed 200 OK in 23ms (Views: 1.0ms | ActiveRecord: 1.3ms | Allocations: 2238)


